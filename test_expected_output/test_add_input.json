        {
            "all_return_continuations": [
                {
                    "ident_func_name": "__deegen_bytecode_Add_0_retcont_0",
                    "impl_func_name": "__deegen_bytecode_Add_0_retcont_0_impl",
                    "kind": 1,
                    "llvm_module": "; ModuleID = '/home/u/project/build/release/annotated/bytecodes/CMakeFiles/deegen_bytecode_definition_ir_source_0.dir/./arithmetic_bytecodes.cpp.o'
source_filename = "/home/u/project/annotated/bytecodes/arithmetic_bytecodes.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, i8, i8, i8, i8 }
%"class.std::ios_base::Init" = type { i8 }
%"struct.detail::llvm_friendly_std_array" = type { [20 x %struct.tvalue_typecheck_strength_reduction_rule] }
%struct.tvalue_typecheck_strength_reduction_rule = type { i32, i32, ptr, i64 }

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tTopEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tBottomEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tTableEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tThreadEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tStringEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tMIVEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI5tBoolEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tNilEb6TValue = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_ = comdat any

$_Z20WriteBarrierSlowPathPvPh = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_ = comdat any

$_Z17FireReleaseAssertPKcS0_jS0_ = comdat any

$x_list_of_tvalue_typecheck_strength_reduction_rules = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@x_list_of_tvalue_typecheck_strength_reduction_rules = linkonce_odr dso_local constant %"struct.detail::llvm_friendly_std_array" { [20 x %struct.tvalue_typecheck_strength_reduction_rule] [%struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1023, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tTopEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 0, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 992, i32 1023, ptr @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tTableEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tStringEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 12, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue, i64 20 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 16, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 8, i32 1023, ptr @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 4, i32 1023, ptr @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 3, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 2, i32 1023, ptr @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tNilEb6TValue, i64 10 }] }, comdat, align 8
@.str.8 = private unnamed_addr constant [25 x i8] c"false && \22unimplemented\22\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"/home/u/project/runtime/runtime_utils.h\00", align 1
@__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh = private unnamed_addr constant [45 x i8] c"void WriteBarrierSlowPath(void *, uint8_t *)\00", align 1
@stderr = external dso_local local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [35 x i8] c"%s:%u: %s: Assertion `%s' failed.\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp, ptr null }]
@__deegen_llvm_repeated_inlining_inhibitor_recorder = constant [4 x ptr] [ptr @_Z20WriteBarrierSlowPathPvPh, ptr @__deegen_bytecode_Add_0_retcont_0_impl, ptr @_Z17FireReleaseAssertPKcS0_jS0_, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp]
@llvm.used = appending global [1 x ptr] [ptr @__deegen_llvm_repeated_inlining_inhibitor_recorder], section "llvm.metadata"
@llvm.compiler.used = appending global [1 x ptr] [ptr @x_list_of_tvalue_typecheck_strength_reduction_rules], section "llvm.metadata"

declare dso_local void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(ptr, ptr, ptr) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 0
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 1
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 2
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 3
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 4
  ret i1 %5
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tTopEb6TValue(i64 %0) #4 comdat {
  ret i1 true
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue(i64 %0) #4 comdat {
  ret i1 false
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tTableEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN6tTable5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 4
  br label %_ZN6tTable5checkE6TValue.exit

_ZN6tTable5checkE6TValue.exit:                    ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tThread5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 3
  br label %_ZN7tThread5checkE6TValue.exit

_ZN7tThread5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tUserdata5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 2
  br label %_ZN9tUserdata5checkE6TValue.exit

_ZN9tUserdata5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tFunction5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 1
  br label %_ZN9tFunction5checkE6TValue.exit

_ZN9tFunction5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tString5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 0
  br label %_ZN7tString5checkE6TValue.exit

_ZN7tString5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ult i64 %0, -1125904201809920
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -1125904201809920
  %3 = icmp eq i64 %2, -1125904201809920
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue(i64 %0) #4 comdat {
  %2 = icmp eq i64 %0, 9221120237041090560
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue(i64 %0) #4 comdat {
  %2 = bitcast i64 %0 to double
  %3 = fcmp ord double %2, 0.000000e+00
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -844429225099264
  %3 = icmp eq i64 %2, -844429225099264
  ret i1 %3
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue(i64 %0) #5 comdat {
_ZN5tBool5checkE6TValue.exit:
  %1 = and i64 %0, -844429225099264
  %2 = icmp eq i64 %1, -844429225099264
  %3 = icmp ne i64 %0, -844429225099137
  %spec.select = and i1 %3, %2
  ret i1 %spec.select
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %0) #5 comdat {
  %2 = icmp eq i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #14
  unreachable
}

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef %1) local_unnamed_addr #7 comdat {
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.9, i32 noundef 81, ptr noundef nonnull @__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh) #14
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #8 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #14
  unreachable
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #14
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #8 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #14
  unreachable
}

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3) local_unnamed_addr #7 comdat {
  %5 = load ptr, ptr @stderr, align 8, !tbaa !10
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.10, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %0) #15
  tail call void @abort() #16
  unreachable
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #10

; Function Attrs: mustprogress noreturn nounwind uwtable
define dso_local void @__deegen_bytecode_Add_0_retcont_0_impl(i64 %0, i64 %1) local_unnamed_addr #11 {
  %3 = tail call i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef 0) #17
  tail call void @DeegenImpl_ReturnValue(i64 %3) #16
  unreachable
}

; Function Attrs: noreturn
declare dso_local void @DeegenImpl_ReturnValue(i64) local_unnamed_addr #12

declare dso_local i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef) local_unnamed_addr #0

; Function Attrs: nounwind uwtable
define internal void @_GLOBAL__sub_I_arithmetic_bytecodes.cpp() #13 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit) #17
  %1 = tail call i32 @__cxa_atexit(ptr nonnull @_ZNSt8ios_base4InitD1Ev, ptr nonnull @_ZStL8__ioinit, ptr nonnull @__dso_handle) #17
  ret void
}

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { inlinehint nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #7 = { inlinehint mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #8 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #10 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #13 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #14 = { noreturn }
attributes #15 = { cold }
attributes #16 = { noreturn nounwind }
attributes #17 = { nounwind }

!llvm.linker.options = !{}
!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!"clang version 15.0.3 (https://github.com/llvm/llvm-project.git 4a2c05b05ed07f1f620e94f6524a8b4b2760a0b1)"}
!3 = !{!4, !8, i64 4}
!4 = !{!"_ZTS22UserHeapGcObjectHeader", !5, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !6, i64 7}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!"_ZTS14HeapEntityType", !6, i64 0}
!9 = !{!"_ZTS11GcCellState", !6, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !6, i64 0}
"
                }
            ],
            "all_slow_paths": [],
            "bytecode_variant_definition": {
                "bytecode_name": "Add",
                "bytecode_ord_in_tu": 0,
                "bytecode_struct_length": 8,
                "bytecode_variant_ord": 0,
                "has_cond_br_target": false,
                "has_output_value": true,
                "impl_function_name": "_ZL23ArithmeticOperationImplIL17LuaMetamethodKind1EEv6TValueS1_",
                "is_interpreter_call_ic_ever_used": false,
                "is_interpreter_call_ic_explicitly_disabled": false,
                "operand_list": [
                    {
                        "kind": "Slot",
                        "name": "lhs",
                        "offset_in_bcstruct": 2,
                        "operand_ordinal": 0,
                        "size_in_bcstruct": 2
                    },
                    {
                        "kind": "Slot",
                        "name": "rhs",
                        "offset_in_bcstruct": 4,
                        "operand_ordinal": 1,
                        "size_in_bcstruct": 2
                    }
                ],
                "operand_name_list": [
                    "lhs",
                    "rhs"
                ],
                "original_operand_type_list": [
                    1,
                    1
                ],
                "output_operand": {
                    "kind": "Slot",
                    "name": "output",
                    "offset_in_bcstruct": 6,
                    "operand_ordinal": 18446744073709551615,
                    "size_in_bcstruct": 2
                },
                "quickening_descriptor": [
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        4
                    ]
                ],
                "quickening_kind": 1
            },
            "jit_main_component": {
                "ident_func_name": "__deegen_bytecode_Add_0",
                "impl_func_name": "__deegen_bytecode_Add_0_impl",
                "kind": 0,
                "llvm_module": "; ModuleID = '/home/u/project/build/release/annotated/bytecodes/CMakeFiles/deegen_bytecode_definition_ir_source_0.dir/./arithmetic_bytecodes.cpp.o'
source_filename = "/home/u/project/annotated/bytecodes/arithmetic_bytecodes.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, i8, i8, i8, i8 }
%1 = type { i32 }
%2 = type { %3, i8, i8, %4, %5, i8, i16, i8, i8, i8, i8, %6, i32, %7, [0 x %8], [4 x i8] }
%3 = type { i8, i8 }
%4 = type { i32 }
%5 = type { i8 }
%6 = type { i32 }
%7 = type { i32 }
%8 = type { i32 }
%9 = type { i8, i8, i32 }
%10 = type { %3, i8, i8, i32, i32, i32, ptr, %11 }
%11 = type { i64 }
%12 = type { i64 }
%13 = type { %1, i8, i8, i8, %5, ptr, [0 x %12] }
%"class.std::ios_base::Init" = type { i8 }
%"struct.detail::llvm_friendly_std_array" = type { [20 x %struct.tvalue_typecheck_strength_reduction_rule] }
%struct.tvalue_typecheck_strength_reduction_rule = type { i32, i32, ptr, i64 }
%union.U = type { %1 }
%class.HeapString = type { i32, i8, i8, i8, i8, i32, i32, [0 x i8] }
%"struct.CacheableDictionary::HashTableEntry" = type { %8, i32 }
%union.U.18 = type { %struct.UserHeapPointer.3 }
%struct.UserHeapPointer.3 = type { i64 }
%union.U.19 = type { %12 }
%union.U.16 = type { %struct.SystemHeapPointer.14 }
%struct.SystemHeapPointer.14 = type { i32 }
%union.U.15 = type { %8 }
%union.U.17 = type { %4 }
%"struct.Structure::InlineHashTableEntry" = type { i8, i8 }
%class.StructureAnchorHashTable = type { %3, i8, i8, i32, [0 x %struct.SystemHeapPointer.14] }
%"struct.StructureAnchorHashTable::HashTableEntry" = type { i8, i8 }
%union.U.13 = type { %11 }
%class.VM = type <{ i64, [56 x i8], %class.SpdsAllocImpl, i64, i64, i32, i32, [1 x %struct.SpdsPtr], [20 x i8], %"class.std::mutex", %"struct.std::atomic", i32, [12 x i8], %class.SpdsAllocImpl, [1 x %struct.SpdsPtr], i32, i32, [4 x i8], ptr, %struct.UserHeapPointer.3, [2 x %struct.UserHeapPointer.3], ptr, %"struct.std::array", %"struct.std::array.6", [4 x i8], [6 x %12], [1 x %struct.SystemHeapPointer.7], [4 x i8], ptr, ptr, ptr, %11, %11, %11, %11, %11, %11, ptr addrspace(256), %struct.UserHeapPointer.3, %struct.UserHeapPointer.3, %1, [60 x i8] }>
%"class.std::mutex" = type { %"class.std::__mutex_base" }
%"class.std::__mutex_base" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { ptr, ptr }
%"struct.std::atomic" = type { %"struct.std::__atomic_base" }
%"struct.std::__atomic_base" = type { i64 }
%class.SpdsAllocImpl = type { ptr, i32, i32 }
%struct.SpdsPtr = type { i32 }
%"struct.std::array" = type { [16 x %struct.UserHeapPointer.3] }
%"struct.std::array.6" = type { [7 x %6] }
%struct.SystemHeapPointer.7 = type { i32 }

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tTopEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tBottomEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tTableEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tThreadEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tStringEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tMIVEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI5tBoolEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tNilEb6TValue = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_ = comdat any

$_Z20WriteBarrierSlowPathPvPh = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_ = comdat any

$_Z17FireReleaseAssertPKcS0_jS0_ = comdat any

$_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo = comdat any

$_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind = comdat any

$_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue = comdat any

$_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo = comdat any

$_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj = comdat any

$_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj = comdat any

$_Z20GetMetatableForValue6TValue = comdat any

$x_list_of_tvalue_typecheck_strength_reduction_rules = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@x_list_of_tvalue_typecheck_strength_reduction_rules = linkonce_odr dso_local constant %"struct.detail::llvm_friendly_std_array" { [20 x %struct.tvalue_typecheck_strength_reduction_rule] [%struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1023, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tTopEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 0, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 992, i32 1023, ptr @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tTableEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tStringEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 12, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue, i64 20 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 16, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 8, i32 1023, ptr @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 4, i32 1023, ptr @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 3, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 2, i32 1023, ptr @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tNilEb6TValue, i64 10 }] }, comdat, align 8
@.str.8 = private unnamed_addr constant [25 x i8] c"false && \22unimplemented\22\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"/home/u/project/runtime/runtime_utils.h\00", align 1
@__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh = private unnamed_addr constant [45 x i8] c"void WriteBarrierSlowPath(void *, uint8_t *)\00", align 1
@stderr = external dso_local local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [35 x i8] c"%s:%u: %s: Assertion `%s' failed.\0A\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"/home/u/project/runtime/table_object.h\00", align 1
@__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_ = private unnamed_addr constant [124 x i8] c"static TableObject::GetMetatableResult TableObject::GetMetatable(T) [T = __attribute__((address_space(256))) TableObject *]\00", align 1
@__PRETTY_FUNCTION__._Z20GetMetatableForValue6TValue = private unnamed_addr constant [51 x i8] c"UserHeapPointer<void> GetMetatableForValue(TValue)\00", align 1
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp, ptr null }]
@__deegen_llvm_repeated_inlining_inhibitor_recorder = constant [11 x ptr] [ptr @_Z20WriteBarrierSlowPathPvPh, ptr @_Z17FireReleaseAssertPKcS0_jS0_, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp, ptr @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo, ptr @__deegen_bytecode_Add_0_impl, ptr @_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo, ptr @__deegen_bytecode_Add_0_retcont_0_impl, ptr @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj, ptr @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj, ptr @_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind, ptr @_Z20GetMetatableForValue6TValue]
@llvm.used = appending global [1 x ptr] [ptr @__deegen_llvm_repeated_inlining_inhibitor_recorder], section "llvm.metadata"
@llvm.compiler.used = appending global [1 x ptr] [ptr @x_list_of_tvalue_typecheck_strength_reduction_rules], section "llvm.metadata"

declare dso_local void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(ptr, ptr, ptr) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 0
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 1
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 2
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 3
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 4
  ret i1 %5
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tTopEb6TValue(i64 %0) #4 comdat {
  ret i1 true
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue(i64 %0) #4 comdat {
  ret i1 false
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tTableEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN6tTable5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 4
  br label %_ZN6tTable5checkE6TValue.exit

_ZN6tTable5checkE6TValue.exit:                    ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tThread5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 3
  br label %_ZN7tThread5checkE6TValue.exit

_ZN7tThread5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tUserdata5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 2
  br label %_ZN9tUserdata5checkE6TValue.exit

_ZN9tUserdata5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tFunction5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 1
  br label %_ZN9tFunction5checkE6TValue.exit

_ZN9tFunction5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tString5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 0
  br label %_ZN7tString5checkE6TValue.exit

_ZN7tString5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ult i64 %0, -1125904201809920
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -1125904201809920
  %3 = icmp eq i64 %2, -1125904201809920
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue(i64 %0) #4 comdat {
  %2 = icmp eq i64 %0, 9221120237041090560
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue(i64 %0) #4 comdat {
  %2 = bitcast i64 %0 to double
  %3 = fcmp ord double %2, 0.000000e+00
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -844429225099264
  %3 = icmp eq i64 %2, -844429225099264
  ret i1 %3
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue(i64 %0) #5 comdat {
_ZN5tBool5checkE6TValue.exit:
  %1 = and i64 %0, -844429225099264
  %2 = icmp eq i64 %1, -844429225099264
  %3 = icmp ne i64 %0, -844429225099137
  %spec.select = and i1 %3, %2
  ret i1 %spec.select
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %0) #5 comdat {
  %2 = icmp eq i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #17
  unreachable
}

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #7

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef %1) local_unnamed_addr #8 comdat {
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.9, i32 noundef 81, ptr noundef nonnull @__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh) #17
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #9 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #17
  unreachable
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #17
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #9 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #17
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @__deegen_bytecode_Add_0_impl(i64 %0, i64 %1) local_unnamed_addr #10 {
._crit_edge:
  %2 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %0) #18
  %3 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %1) #18
  %4 = fadd double %2, %3
  %5 = bitcast double %4 to i64
  tail call void @DeegenImpl_ReturnValue(i64 %5) #19
  unreachable
}

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #7

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3) local_unnamed_addr #8 comdat {
  %5 = load ptr, ptr @stderr, align 8, !tbaa !10
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.10, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %0) #20
  tail call void @abort() #19
  unreachable
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef %0, i64 %1, ptr noundef nonnull align 4 dereferenceable(8) %2) local_unnamed_addr #13 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %union.U, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #21
  br label %6

6:                                                ; preds = %8, %3
  %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0 = phi i64 [ 0, %3 ], [ %12, %8 ]
  %7 = icmp ult i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0, 4
  br i1 %7, label %8, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit

8:                                                ; preds = %6
  %9 = getelementptr inbounds i8, ptr addrspace(256) %0, i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0
  %10 = load i8, ptr addrspace(256) %9, align 1, !tbaa !12
  %11 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0
  store i8 %10, ptr %11, align 1, !tbaa !12
  %12 = add nuw nsw i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0, 1
  br label %6, !llvm.loop !13

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit: ; preds = %6
  %.sroa.011.0.copyload = load i32, ptr %5, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #21
  %13 = zext i32 %.sroa.011.0.copyload to i64
  %14 = inttoptr i64 %13 to ptr addrspace(256)
  %15 = load i8, ptr addrspace(256) %14, align 1, !tbaa !17
  %16 = icmp eq i8 %15, 9
  br i1 %16, label %17, label %40, !prof !19

17:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit
  %18 = getelementptr inbounds %2, ptr addrspace(256) %14, i64 0, i32 12
  %19 = load i32, ptr addrspace(256) %18, align 4, !tbaa !20
  %20 = icmp ne i32 %19, 0
  %21 = getelementptr inbounds %9, ptr %2, i64 0, i32 1
  %22 = zext i1 %20 to i8
  store i8 %22, ptr %21, align 1, !tbaa !28
  %23 = getelementptr inbounds %2, ptr addrspace(256) %14, i64 0, i32 8
  %24 = load i8, ptr addrspace(256) %23, align 1, !tbaa !32
  %25 = zext i8 %24 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #21
  %26 = inttoptr i64 %1 to ptr addrspace(256)
  %27 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %26, i64 0, i32 5
  %28 = load i32, ptr addrspace(256) %27, align 8, !tbaa !33
  %29 = call noundef zeroext i1 @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj(ptr addrspace(256) noundef %14, i64 %1, i32 noundef %28, ptr noundef nonnull align 4 dereferenceable(4) %4)
  br i1 %29, label %30, label %39

30:                                               ; preds = %17
  %31 = load i32, ptr %4, align 4, !tbaa !16
  %32 = icmp ult i32 %31, %25
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  store i8 3, ptr %2, align 4, !tbaa !35
  %34 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %31, ptr %34, align 4, !tbaa !36
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

35:                                               ; preds = %30
  store i8 4, ptr %2, align 4, !tbaa !35
  %36 = xor i32 %31, -1
  %37 = add i32 %36, %25
  %38 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %37, ptr %38, align 4, !tbaa !36
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

39:                                               ; preds = %17
  store i8 1, ptr %2, align 4, !tbaa !35
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i: ; preds = %39, %35, %33
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #21
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

40:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit
  %41 = icmp eq i8 %15, 11
  tail call void @llvm.assume(i1 %41)
  %42 = getelementptr inbounds %10, ptr addrspace(256) %14, i64 0, i32 7
  %43 = load i64, ptr addrspace(256) %42, align 8, !tbaa !37
  %44 = icmp ne i64 %43, 0
  %45 = getelementptr inbounds %9, ptr %2, i64 0, i32 1
  %46 = zext i1 %44 to i8
  store i8 %46, ptr %45, align 1, !tbaa !28
  %47 = getelementptr inbounds %10, ptr addrspace(256) %14, i64 0, i32 2
  %48 = load i8, ptr addrspace(256) %47, align 1, !tbaa !41
  %49 = zext i8 %48 to i32
  %50 = inttoptr i64 %1 to ptr addrspace(256)
  %51 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %50, i64 0, i32 5
  %52 = load i32, ptr addrspace(256) %51, align 8, !tbaa !33
  %53 = getelementptr inbounds %10, ptr addrspace(256) %14, i64 0, i32 4
  %54 = load i32, ptr addrspace(256) %53, align 8, !tbaa !42
  %55 = zext i32 %54 to i64
  %56 = and i32 %54, %52
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %1, 3
  %59 = trunc i64 %58 to i32
  %.phi.trans.insert.i.i = getelementptr inbounds %10, ptr addrspace(256) %14, i64 0, i32 6
  %.pre.i.i = load ptr, ptr addrspace(256) %.phi.trans.insert.i.i, align 8, !tbaa !43
  br label %._crit_edge20.i.i

._crit_edge20.i.i:                                ; preds = %._crit_edge.i.i, %40
  %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0 = phi i64 [ %57, %40 ], [ %65, %._crit_edge.i.i ]
  %60 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0
  %.sroa.016.0.copyload.i.i = load i32, ptr %60, align 4, !tbaa.struct !15
  %61 = icmp eq i32 %.sroa.016.0.copyload.i.i, 0
  br i1 %61, label %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i, label %62

62:                                               ; preds = %._crit_edge20.i.i
  %63 = icmp eq i32 %.sroa.016.0.copyload.i.i, %59
  br i1 %63, label %66, label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %62
  %64 = add nsw i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0, 1
  %65 = and i64 %64, %55
  br label %._crit_edge20.i.i, !llvm.loop !44

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !45
  %69 = icmp ult i32 %68, %49
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  store i8 3, ptr %2, align 4, !tbaa !35
  %71 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %68, ptr %71, align 4, !tbaa !36
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

72:                                               ; preds = %66
  store i8 4, ptr %2, align 4, !tbaa !35
  %73 = xor i32 %68, -1
  %74 = add i32 %73, %49
  %75 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %74, ptr %75, align 4, !tbaa !36
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i: ; preds = %._crit_edge20.i.i
  store i8 2, ptr %2, align 4, !tbaa !35
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit: ; preds = %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i, %72, %70, %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local i64 @_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind(i64 %0, i64 %1, i32 noundef %2) local_unnamed_addr #3 comdat {
  %4 = alloca %union.U.18, align 8
  %5 = alloca %union.U.18, align 8
  %6 = alloca %union.U.19, align 8
  %7 = alloca %union.U.19, align 8
  %8 = alloca %9, align 8
  %9 = alloca %9, align 8
  %10 = tail call i64 @_Z20GetMetatableForValue6TValue(i64 %0)
  %.not = icmp eq i64 %10, 0
  br i1 %.not, label %._crit_edge, label %11

11:                                               ; preds = %3
  %12 = inttoptr i64 %10 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #21
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds %struct.UserHeapPointer.3, ptr addrspace(256) inttoptr (i64 264 to ptr addrspace(256)), i64 %13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #21
  br label %15

15:                                               ; preds = %17, %11
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0 = phi i64 [ 0, %11 ], [ %21, %17 ]
  %16 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0, 8
  br i1 %16, label %17, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit

17:                                               ; preds = %15
  %18 = getelementptr inbounds i8, ptr addrspace(256) %14, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !12
  %20 = getelementptr inbounds [8 x i8], ptr %5, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0
  store i8 %19, ptr %20, align 1, !tbaa !12
  %21 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0, 1
  br label %15, !llvm.loop !48

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit: ; preds = %15
  %.sroa.08.0.copyload.i = load i64, ptr %5, align 8, !tbaa.struct !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #21
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef nonnull %12, i64 %.sroa.08.0.copyload.i, ptr noundef nonnull align 4 dereferenceable(8) %8)
  br label %22

22:                                               ; preds = %24, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit ], [ %25, %24 ]
  %23 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0, 8
  br i1 %23, label %24, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67

24:                                               ; preds = %22
  %25 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0, 1
  br label %22, !llvm.loop !48

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67: ; preds = %22
  %.sroa.014.0.copyload = load i64, ptr %8, align 8, !tbaa.struct !51
  %.sroa.039.0.extract.trunc = trunc i64 %.sroa.014.0.copyload to i8
  %26 = add i8 %.sroa.039.0.extract.trunc, -1
  %27 = icmp ult i8 %26, 2
  br i1 %27, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread, label %28

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #21
  br label %._crit_edge

28:                                               ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67
  %29 = icmp eq i8 %.sroa.039.0.extract.trunc, 3
  br i1 %29, label %30, label %40

30:                                               ; preds = %28
  %31 = ashr i64 %.sroa.014.0.copyload, 32
  %32 = getelementptr inbounds %13, ptr addrspace(256) %12, i64 0, i32 6, i64 %31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #21
  br label %33

33:                                               ; preds = %35, %30
  %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0 = phi i64 [ 0, %30 ], [ %39, %35 ]
  %34 = icmp ult i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0, 8
  br i1 %34, label %35, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6

35:                                               ; preds = %33
  %36 = getelementptr inbounds i8, ptr addrspace(256) %32, i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0
  %37 = load i8, ptr addrspace(256) %36, align 1, !tbaa !12
  %38 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0
  store i8 %37, ptr %38, align 1, !tbaa !12
  %39 = add nuw nsw i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0, 1
  br label %33, !llvm.loop !54

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6:     ; preds = %33
  %.sroa.067.0.copyload = load i64, ptr %6, align 8, !tbaa.struct !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #21
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5

40:                                               ; preds = %28
  %41 = icmp eq i8 %.sroa.039.0.extract.trunc, 4
  call void @llvm.assume(i1 %41)
  %42 = getelementptr inbounds %13, ptr addrspace(256) %12, i64 0, i32 5
  %43 = load ptr, ptr addrspace(256) %42, align 8, !tbaa !55
  %44 = ashr i64 %.sroa.014.0.copyload, 32
  %45 = getelementptr inbounds %12, ptr %43, i64 %44
  %.sroa.0.0.copyload.i = load i64, ptr %45, align 8, !tbaa.struct !49
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5: ; preds = %40, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6
  %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0 = phi i64 [ %.sroa.067.0.copyload, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6 ], [ %.sroa.0.0.copyload.i, %40 ]
  %46 = icmp eq i64 %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0, -844429225099137
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #21
  br i1 %46, label %._crit_edge, label %._crit_edge2

._crit_edge:                                      ; preds = %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5, %3, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread
  %47 = call i64 @_Z20GetMetatableForValue6TValue(i64 %1)
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %._crit_edge2, label %49

49:                                               ; preds = %._crit_edge
  %50 = inttoptr i64 %47 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #21
  %51 = sext i32 %2 to i64
  %52 = getelementptr inbounds %struct.UserHeapPointer.3, ptr addrspace(256) inttoptr (i64 264 to ptr addrspace(256)), i64 %51
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #21
  br label %53

53:                                               ; preds = %55, %49
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0 = phi i64 [ 0, %49 ], [ %59, %55 ]
  %54 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0, 8
  br i1 %54, label %55, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70

55:                                               ; preds = %53
  %56 = getelementptr inbounds i8, ptr addrspace(256) %52, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0
  %57 = load i8, ptr addrspace(256) %56, align 1, !tbaa !12
  %58 = getelementptr inbounds [8 x i8], ptr %4, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0
  store i8 %57, ptr %58, align 1, !tbaa !12
  %59 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0, 1
  br label %53, !llvm.loop !48

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70: ; preds = %53
  %.sroa.08.0.copyload.i69 = load i64, ptr %4, align 8, !tbaa.struct !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #21
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef nonnull %50, i64 %.sroa.08.0.copyload.i69, ptr noundef nonnull align 4 dereferenceable(8) %9)
  br label %60

60:                                               ; preds = %62, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70 ], [ %63, %62 ]
  %61 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0, 8
  br i1 %61, label %62, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73

62:                                               ; preds = %60
  %63 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0, 1
  br label %60, !llvm.loop !48

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73: ; preds = %60
  %.sroa.0.0.copyload = load i64, ptr %9, align 8, !tbaa.struct !51
  %.sroa.029.0.extract.trunc = trunc i64 %.sroa.0.0.copyload to i8
  %64 = add i8 %.sroa.029.0.extract.trunc, -1
  %65 = icmp ult i8 %64, 2
  br i1 %65, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit, label %66

66:                                               ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73
  %67 = icmp eq i8 %.sroa.029.0.extract.trunc, 3
  br i1 %67, label %68, label %78

68:                                               ; preds = %66
  %69 = ashr i64 %.sroa.0.0.copyload, 32
  %70 = getelementptr inbounds %13, ptr addrspace(256) %50, i64 0, i32 6, i64 %69
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #21
  br label %71

71:                                               ; preds = %73, %68
  %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0 = phi i64 [ 0, %68 ], [ %77, %73 ]
  %72 = icmp ult i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0, 8
  br i1 %72, label %73, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit

73:                                               ; preds = %71
  %74 = getelementptr inbounds i8, ptr addrspace(256) %70, i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0
  %75 = load i8, ptr addrspace(256) %74, align 1, !tbaa !12
  %76 = getelementptr inbounds [8 x i8], ptr %7, i64 0, i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0
  store i8 %75, ptr %76, align 1, !tbaa !12
  %77 = add nuw nsw i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0, 1
  br label %71, !llvm.loop !54

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit:      ; preds = %71
  %.sroa.060.0.copyload = load i64, ptr %7, align 8, !tbaa.struct !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #21
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

78:                                               ; preds = %66
  %79 = icmp eq i8 %.sroa.029.0.extract.trunc, 4
  call void @llvm.assume(i1 %79)
  %80 = getelementptr inbounds %13, ptr addrspace(256) %50, i64 0, i32 5
  %81 = load ptr, ptr addrspace(256) %80, align 8, !tbaa !55
  %82 = ashr i64 %.sroa.0.0.copyload, 32
  %83 = getelementptr inbounds %12, ptr %81, i64 %82
  %.sroa.0.0.copyload.i74 = load i64, ptr %83, align 8, !tbaa.struct !49
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73, %78, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit
  %.sroa.036.0.reg2mem113.0.reg2mem182.0.reg2mem42.0.reg2mem136.0.reg2mem233.0 = phi i64 [ %.sroa.060.0.copyload, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit ], [ %.sroa.0.0.copyload.i74, %78 ], [ -844429225099137, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #21
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit
  %.sroa.0.3.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %.sroa.036.0.reg2mem113.0.reg2mem182.0.reg2mem42.0.reg2mem136.0.reg2mem233.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit ], [ %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5 ], [ -844429225099137, %._crit_edge ]
  ret i64 %.sroa.0.3.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: mustprogress noreturn nounwind uwtable
define internal void @__deegen_bytecode_Add_0_retcont_0_impl(i64 %0, i64 %1) #14 {
  %3 = tail call i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef 0) #21
  tail call void @DeegenImpl_ReturnValue(i64 %3) #19
  unreachable
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %0) local_unnamed_addr #4 comdat {
  %2 = bitcast i64 %0 to double
  ret double %2
}

; Function Attrs: noreturn
declare dso_local void @DeegenImpl_ReturnValue(i64) local_unnamed_addr #15

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo(i32 %0, i64 %1, ptr noundef nonnull align 4 dereferenceable(8) %2) local_unnamed_addr #13 comdat align 2 {
  %4 = zext i32 %0 to i64
  %5 = inttoptr i64 %4 to ptr addrspace(256)
  %6 = getelementptr inbounds %10, ptr addrspace(256) %5, i64 0, i32 7
  %7 = load i64, ptr addrspace(256) %6, align 8, !tbaa !37
  %8 = icmp ne i64 %7, 0
  %9 = getelementptr inbounds %9, ptr %2, i64 0, i32 1
  %10 = zext i1 %8 to i8
  store i8 %10, ptr %9, align 1, !tbaa !28
  %11 = getelementptr inbounds %10, ptr addrspace(256) %5, i64 0, i32 2
  %12 = load i8, ptr addrspace(256) %11, align 1, !tbaa !41
  %13 = zext i8 %12 to i32
  %14 = inttoptr i64 %1 to ptr addrspace(256)
  %15 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %14, i64 0, i32 5
  %16 = load i32, ptr addrspace(256) %15, align 8, !tbaa !33
  %17 = getelementptr inbounds %10, ptr addrspace(256) %5, i64 0, i32 4
  %18 = load i32, ptr addrspace(256) %17, align 8, !tbaa !42
  %19 = zext i32 %18 to i64
  %20 = and i32 %18, %16
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %1, 3
  %23 = trunc i64 %22 to i32
  %.phi.trans.insert.i = getelementptr inbounds %10, ptr addrspace(256) %5, i64 0, i32 6
  %.pre.i = load ptr, ptr addrspace(256) %.phi.trans.insert.i, align 8, !tbaa !43
  br label %._crit_edge20.i

._crit_edge20.i:                                  ; preds = %._crit_edge.i, %3
  %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0 = phi i64 [ %21, %3 ], [ %29, %._crit_edge.i ]
  %24 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0
  %.sroa.016.0.copyload.i = load i32, ptr %24, align 4, !tbaa.struct !15
  %25 = icmp eq i32 %.sroa.016.0.copyload.i, 0
  br i1 %25, label %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit, label %26

26:                                               ; preds = %._crit_edge20.i
  %27 = icmp eq i32 %.sroa.016.0.copyload.i, %23
  br i1 %27, label %30, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %26
  %28 = add nsw i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0, 1
  %29 = and i64 %28, %19
  br label %._crit_edge20.i, !llvm.loop !44

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !45
  %33 = icmp ult i32 %32, %13
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  store i8 3, ptr %2, align 4, !tbaa !35
  %35 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %32, ptr %35, align 4, !tbaa !36
  br label %40

36:                                               ; preds = %30
  store i8 4, ptr %2, align 4, !tbaa !35
  %37 = xor i32 %32, -1
  %38 = add i32 %37, %13
  %39 = getelementptr inbounds %9, ptr %2, i64 0, i32 2
  store i32 %38, ptr %39, align 4, !tbaa !36
  br label %40

_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit: ; preds = %._crit_edge20.i
  store i8 2, ptr %2, align 4, !tbaa !35
  br label %40

40:                                               ; preds = %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit, %36, %34
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj(ptr addrspace(256) noundef %0, i64 %1, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3) local_unnamed_addr #13 comdat align 2 {
  %5 = alloca %union.U.16, align 4
  %6 = alloca %union.U.15, align 4
  %7 = alloca %union.U.15, align 4
  %8 = alloca %union.U.17, align 4
  %9 = lshr i64 %1, 3
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 7
  %12 = load i8, ptr addrspace(256) %11, align 4, !tbaa !58
  %13 = zext i8 %12 to i64
  %14 = xor i64 %13, -1
  %15 = lshr i32 %2, 8
  %16 = and i32 %15, 255
  %17 = zext i32 %16 to i64
  br label %._crit_edge1._crit_edge.i

._crit_edge1._crit_edge.i:                        ; preds = %._crit_edge1.i, %4
  %.pn.reg2mem.0.i.reg2mem.0.reg2mem.0 = phi i64 [ %17, %4 ], [ %63, %._crit_edge1.i ]
  %.025.reg2mem62.0.reg2mem101.0.i = or i64 %.pn.reg2mem.0.i.reg2mem.0.reg2mem.0, %14
  %18 = getelementptr inbounds %"struct.Structure::InlineHashTableEntry", ptr addrspace(256) %0, i64 %.025.reg2mem62.0.reg2mem101.0.i, i32 1
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !59
  %20 = icmp eq i8 %19, 127
  br i1 %20, label %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread, label %21

21:                                               ; preds = %._crit_edge1._crit_edge.i
  %22 = getelementptr inbounds %"struct.Structure::InlineHashTableEntry", ptr addrspace(256) %0, i64 %.025.reg2mem62.0.reg2mem101.0.i
  %23 = load i8, ptr addrspace(256) %22, align 1, !tbaa !61
  %24 = trunc i32 %2 to i8
  %25 = icmp eq i8 %23, %24
  br i1 %25, label %26, label %._crit_edge1.i

26:                                               ; preds = %21
  %27 = icmp sgt i8 %19, -1
  br i1 %27, label %28, label %38

28:                                               ; preds = %26
  %29 = zext i8 %19 to i64
  %30 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 14, i64 %29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #21
  br label %31

31:                                               ; preds = %33, %28
  %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0 = phi i64 [ 0, %28 ], [ %37, %33 ]
  %32 = icmp ult i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0, 4
  br i1 %32, label %33, label %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i

33:                                               ; preds = %31
  %34 = getelementptr inbounds i8, ptr addrspace(256) %30, i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0
  %35 = load i8, ptr addrspace(256) %34, align 1, !tbaa !12
  %36 = getelementptr inbounds [4 x i8], ptr %7, i64 0, i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0
  store i8 %35, ptr %36, align 1, !tbaa !12
  %37 = add nuw nsw i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0, 1
  br label %31, !llvm.loop !62

_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i: ; preds = %31
  %.sroa.015.0.copyload.i.i = load i32, ptr %7, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #21
  br label %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i

38:                                               ; preds = %26
  %39 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 14
  %40 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 2
  %41 = load i8, ptr addrspace(256) %40, align 1, !tbaa !63
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds %8, ptr addrspace(256) %39, i64 %42
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #21
  br label %44

44:                                               ; preds = %46, %38
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0 = phi i64 [ 0, %38 ], [ %50, %46 ]
  %45 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0, 4
  br i1 %45, label %46, label %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i

46:                                               ; preds = %44
  %47 = getelementptr inbounds i8, ptr addrspace(256) %43, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0
  %48 = load i8, ptr addrspace(256) %47, align 1, !tbaa !12
  %49 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0
  store i8 %48, ptr %49, align 1, !tbaa !12
  %50 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0, 1
  br label %44, !llvm.loop !64

_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i: ; preds = %44
  %.sroa.08.0.copyload.i.i.i = load i32, ptr %5, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #21
  %51 = zext i32 %.sroa.08.0.copyload.i.i.i to i64
  %52 = inttoptr i64 %51 to ptr addrspace(256)
  %53 = sext i8 %19 to i64
  %54 = getelementptr inbounds %8, ptr addrspace(256) %52, i64 %53
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #21
  br label %55

55:                                               ; preds = %57, %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i
  %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0 = phi i64 [ 0, %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i ], [ %61, %57 ]
  %56 = icmp ult i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0, 4
  br i1 %56, label %57, label %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i

57:                                               ; preds = %55
  %58 = getelementptr inbounds i8, ptr addrspace(256) %54, i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0
  %59 = load i8, ptr addrspace(256) %58, align 1, !tbaa !12
  %60 = getelementptr inbounds [4 x i8], ptr %6, i64 0, i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0
  store i8 %59, ptr %60, align 1, !tbaa !12
  %61 = add nuw nsw i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0, 1
  br label %55, !llvm.loop !62

_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i: ; preds = %55
  %.sroa.022.0.copyload.i.i = load i32, ptr %6, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #21
  br label %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i

_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i: ; preds = %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i
  %.sroa.0.0.reg2mem.0.reg2mem.0.reg2mem.0.i.i.reg2mem.0.reg2mem.0 = phi i32 [ %.sroa.015.0.copyload.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i ], [ %.sroa.022.0.copyload.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i ]
  %62 = icmp eq i32 %.sroa.0.0.reg2mem.0.reg2mem.0.reg2mem.0.i.i.reg2mem.0.reg2mem.0, %10
  br i1 %62, label %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit, label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i, %21
  %63 = add nsw i64 %.025.reg2mem62.0.reg2mem101.0.i, -1
  br label %._crit_edge1._crit_edge.i, !llvm.loop !65

_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit: ; preds = %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i
  %64 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 1
  %65 = load i8, ptr addrspace(256) %64, align 2, !tbaa !66
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 2
  %68 = load i8, ptr addrspace(256) %67, align 1, !tbaa !63
  %69 = zext i8 %68 to i32
  %70 = sext i8 %19 to i32
  %71 = add nsw i32 %66, %70
  %72 = sub nsw i32 %71, %69
  store i32 %72, ptr %3, align 4, !tbaa !16
  br label %._crit_edge

_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread: ; preds = %._crit_edge1._crit_edge.i
  %73 = getelementptr inbounds %2, ptr addrspace(256) %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #21
  br label %74

74:                                               ; preds = %76, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread
  %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0 = phi i64 [ 0, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread ], [ %80, %76 ]
  %75 = icmp ult i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0, 4
  br i1 %75, label %76, label %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit

76:                                               ; preds = %74
  %77 = getelementptr inbounds i8, ptr addrspace(256) %73, i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0
  %78 = load i8, ptr addrspace(256) %77, align 1, !tbaa !12
  %79 = getelementptr inbounds [4 x i8], ptr %8, i64 0, i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0
  store i8 %78, ptr %79, align 1, !tbaa !12
  %80 = add nuw nsw i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0, 1
  br label %74, !llvm.loop !67

_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit: ; preds = %74
  %.sroa.015.0.copyload = load i32, ptr %8, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #21
  %81 = icmp eq i32 %.sroa.015.0.copyload, 0
  br i1 %81, label %._crit_edge, label %82, !prof !19

82:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit
  %83 = zext i32 %.sroa.015.0.copyload to i64
  %84 = inttoptr i64 %83 to ptr addrspace(256)
  %85 = tail call noundef zeroext i1 @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj(ptr addrspace(256) noundef nonnull %84, i32 %10, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit, %82
  %.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %85, %82 ], [ true, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit ], [ false, %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit ]
  ret i1 %.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj(ptr addrspace(256) noundef %0, i32 %1, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3) local_unnamed_addr #13 comdat align 2 {
  %5 = alloca %union.U.16, align 4
  %6 = alloca %union.U.15, align 4
  %7 = getelementptr inbounds %class.StructureAnchorHashTable, ptr addrspace(256) %0, i64 0, i32 3
  %8 = load i32, ptr addrspace(256) %7, align 4, !tbaa !68
  %9 = sext i32 %8 to i64
  %10 = lshr i32 %2, 8
  %11 = zext i32 %10 to i64
  br label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge1, %4
  %.pn.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %11, %4 ], [ %45, %._crit_edge1 ]
  %.024.reg2mem64.0.reg2mem105.0 = or i64 %.pn.reg2mem.0.reg2mem.0.reg2mem.0, %9
  %12 = getelementptr inbounds %"struct.StructureAnchorHashTable::HashTableEntry", ptr addrspace(256) %0, i64 %.024.reg2mem64.0.reg2mem105.0
  %13 = load i8, ptr addrspace(256) %12, align 1, !tbaa !70
  %14 = zext i8 %13 to i32
  %15 = icmp eq i8 %13, -1
  br i1 %15, label %._crit_edge1._crit_edge._crit_edge, label %16

16:                                               ; preds = %._crit_edge1._crit_edge
  %17 = getelementptr inbounds %"struct.StructureAnchorHashTable::HashTableEntry", ptr addrspace(256) %0, i64 %.024.reg2mem64.0.reg2mem105.0, i32 1
  %18 = load i8, ptr addrspace(256) %17, align 1, !tbaa !72
  %19 = trunc i32 %2 to i8
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %._crit_edge1

21:                                               ; preds = %16
  %22 = lshr i8 %13, 4
  %23 = and i8 %13, 15
  %24 = zext i8 %22 to i64
  %25 = getelementptr inbounds %class.StructureAnchorHashTable, ptr addrspace(256) %0, i64 0, i32 4, i64 %24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #21
  br label %26

26:                                               ; preds = %28, %21
  %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0 = phi i64 [ 0, %21 ], [ %32, %28 ]
  %27 = icmp ult i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0, 4
  br i1 %27, label %28, label %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i

28:                                               ; preds = %26
  %29 = getelementptr inbounds i8, ptr addrspace(256) %25, i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0
  %30 = load i8, ptr addrspace(256) %29, align 1, !tbaa !12
  %31 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0
  store i8 %30, ptr %31, align 1, !tbaa !12
  %32 = add nuw nsw i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0, 1
  br label %26, !llvm.loop !64

_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i: ; preds = %26
  %.sroa.021.0.copyload.i = load i32, ptr %5, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #21
  %33 = zext i32 %.sroa.021.0.copyload.i to i64
  %34 = inttoptr i64 %33 to ptr addrspace(256)
  %35 = zext i8 %23 to i64
  %36 = getelementptr inbounds %8, ptr addrspace(256) %34, i64 %35
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #21
  br label %37

37:                                               ; preds = %39, %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i
  %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0 = phi i64 [ 0, %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i ], [ %43, %39 ]
  %38 = icmp ult i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0, 4
  br i1 %38, label %39, label %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit

39:                                               ; preds = %37
  %40 = getelementptr inbounds i8, ptr addrspace(256) %36, i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0
  %41 = load i8, ptr addrspace(256) %40, align 1, !tbaa !12
  %42 = getelementptr inbounds [4 x i8], ptr %6, i64 0, i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0
  store i8 %41, ptr %42, align 1, !tbaa !12
  %43 = add nuw nsw i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0, 1
  br label %37, !llvm.loop !62

_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit: ; preds = %37
  %.sroa.012.0.copyload.i = load i32, ptr %6, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #21
  %44 = icmp eq i32 %.sroa.012.0.copyload.i, %1
  br i1 %44, label %._crit_edge27.thread, label %._crit_edge1

._crit_edge27.thread:                             ; preds = %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit
  store i32 %14, ptr %3, align 4, !tbaa !16
  br label %._crit_edge1._crit_edge._crit_edge

._crit_edge1:                                     ; preds = %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit, %16
  %45 = add nsw i64 %.024.reg2mem64.0.reg2mem105.0, -1
  br label %._crit_edge1._crit_edge, !llvm.loop !73

._crit_edge1._crit_edge._crit_edge:               ; preds = %._crit_edge1._crit_edge, %._crit_edge27.thread
  %46 = xor i1 %15, true
  ret i1 %46
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local i64 @_Z20GetMetatableForValue6TValue(i64 %0) local_unnamed_addr #3 comdat {
  %2 = alloca %union.U.13, align 8
  %3 = alloca %union.U, align 4
  %4 = icmp ugt i64 %0, -844429225099137
  br i1 %4, label %5, label %72, !prof !19

5:                                                ; preds = %1
  %6 = inttoptr i64 %0 to ptr addrspace(256)
  %7 = getelementptr inbounds %0, ptr addrspace(256) %6, i64 0, i32 1
  %8 = load i8, ptr addrspace(256) %7, align 4, !tbaa !3
  switch i8 %8, label %71 [
    i8 4, label %9
    i8 0, label %59
    i8 1, label %63
    i8 3, label %67
  ], !prof !74

9:                                                ; preds = %5
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #21
  br label %10

10:                                               ; preds = %12, %9
  %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0 = phi i64 [ 0, %9 ], [ %16, %12 ]
  %11 = icmp ult i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0, 4
  br i1 %11, label %12, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i

12:                                               ; preds = %10
  %13 = getelementptr inbounds i8, ptr addrspace(256) %6, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0
  %14 = load i8, ptr addrspace(256) %13, align 1, !tbaa !12
  %15 = getelementptr inbounds [4 x i8], ptr %3, i64 0, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0
  store i8 %14, ptr %15, align 1, !tbaa !12
  %16 = add nuw nsw i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0, 1
  br label %10, !llvm.loop !13

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %10
  %.sroa.019.0.copyload.i = load i32, ptr %3, align 4, !tbaa.struct !15
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #21
  %17 = zext i32 %.sroa.019.0.copyload.i to i64
  %18 = inttoptr i64 %17 to ptr addrspace(256)
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !17
  switch i8 %19, label %58 [
    i8 9, label %20
    i8 11, label %49
  ], !prof !75

20:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %21 = getelementptr inbounds %2, ptr addrspace(256) %18, i64 0, i32 12
  %22 = load i32, ptr addrspace(256) %21, align 4, !tbaa !20
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, label %24

24:                                               ; preds = %20
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = sext i32 %22 to i64
  %28 = shl nsw i64 %27, 3
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

29:                                               ; preds = %24
  %30 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %31 = ptrtoint ptr %30 to i64
  %32 = add i64 %31, %0
  %33 = inttoptr i64 %32 to ptr
  %34 = add nsw i32 %22, -1
  %35 = getelementptr inbounds %2, ptr addrspace(256) %18, i64 0, i32 8
  %36 = load i8, ptr addrspace(256) %35, align 1, !tbaa !32
  %37 = zext i8 %36 to i32
  %38 = icmp ult i32 %34, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %29
  %40 = zext i32 %34 to i64
  %41 = getelementptr inbounds %13, ptr %33, i64 0, i32 6, i64 %40
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

42:                                               ; preds = %29
  %43 = sub nsw i32 %37, %22
  %44 = getelementptr inbounds %13, ptr %33, i64 0, i32 5
  %45 = load ptr, ptr %44, align 8, !tbaa !55
  %46 = sext i32 %43 to i64
  %47 = getelementptr inbounds %12, ptr %45, i64 %46
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i: ; preds = %42, %39
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0 = phi ptr [ %41, %39 ], [ %47, %42 ]
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i = load i64, ptr %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0, align 8
  %48 = icmp eq i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, -844429225099137
  %spec.select.i.i = select i1 %48, i64 0, i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

49:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %50 = getelementptr inbounds %10, ptr addrspace(256) %18, i64 0, i32 7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #21
  br label %51

51:                                               ; preds = %53, %49
  %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0 = phi i64 [ 0, %49 ], [ %57, %53 ]
  %52 = icmp ult i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0, 8
  br i1 %52, label %53, label %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, ptr addrspace(256) %50, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0
  %55 = load i8, ptr addrspace(256) %54, align 1, !tbaa !12
  %56 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0
  store i8 %55, ptr %56, align 1, !tbaa !12
  %57 = add nuw nsw i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0, 1
  br label %51, !llvm.loop !76

_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %51
  %.sroa.026.0.copyload.i = load i64, ptr %2, align 8, !tbaa.struct !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #21
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

58:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2359, ptr noundef nonnull @__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_) #17
  unreachable

59:                                               ; preds = %5
  %60 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !77
  %61 = inttoptr i64 %60 to ptr
  %62 = getelementptr inbounds %class.VM, ptr %61, i64 0, i32 34
  %.sroa.04.0.copyload = load i64, ptr %62, align 16, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

63:                                               ; preds = %5
  %64 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !77
  %65 = inttoptr i64 %64 to ptr
  %66 = getelementptr inbounds %class.VM, ptr %65, i64 0, i32 35
  %.sroa.04.0.copyload5 = load i64, ptr %66, align 8, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

67:                                               ; preds = %5
  %68 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !77
  %69 = inttoptr i64 %68 to ptr
  %70 = getelementptr inbounds %class.VM, ptr %69, i64 0, i32 36
  %.sroa.04.0.copyload6 = load i64, ptr %70, align 32, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

71:                                               ; preds = %5
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2706, ptr noundef nonnull @__PRETTY_FUNCTION__._Z20GetMetatableForValue6TValue) #17
  unreachable

72:                                               ; preds = %1
  %73 = and i64 %0, -844429225099264
  %74 = icmp eq i64 %73, -844429225099264
  br i1 %74, label %75, label %83

75:                                               ; preds = %72
  %76 = icmp eq i64 %0, -844429225099137
  %77 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !77
  %78 = inttoptr i64 %77 to ptr
  br i1 %76, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %class.VM, ptr %78, i64 0, i32 31
  %.sroa.04.0.copyload7 = load i64, ptr %80, align 8, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

81:                                               ; preds = %75
  %82 = getelementptr inbounds %class.VM, ptr %78, i64 0, i32 32
  %.sroa.04.0.copyload8 = load i64, ptr %82, align 64, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

83:                                               ; preds = %72
  %84 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !77
  %85 = inttoptr i64 %84 to ptr
  %86 = getelementptr inbounds %class.VM, ptr %85, i64 0, i32 33
  %.sroa.04.0.copyload9 = load i64, ptr %86, align 8, !tbaa.struct !49
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit: ; preds = %20, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %26, %83, %81, %79, %67, %63, %59
  %.sroa.04.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %.sroa.04.0.copyload6, %67 ], [ %.sroa.04.0.copyload5, %63 ], [ %.sroa.04.0.copyload, %59 ], [ %.sroa.026.0.copyload.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i ], [ %28, %26 ], [ %spec.select.i.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i ], [ %.sroa.04.0.copyload7, %79 ], [ %.sroa.04.0.copyload8, %81 ], [ %.sroa.04.0.copyload9, %83 ], [ 0, %20 ]
  ret i64 %.sroa.04.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

declare dso_local i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef) local_unnamed_addr #0

; Function Attrs: nounwind uwtable
define internal void @_GLOBAL__sub_I_arithmetic_bytecodes.cpp() #13 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit) #21
  %1 = tail call i32 @__cxa_atexit(ptr nonnull @_ZNSt8ios_base4InitD1Ev, ptr nonnull @_ZStL8__ioinit, ptr nonnull @__dso_handle) #21
  ret void
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #16

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { inlinehint nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #7 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #8 = { inlinehint mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #9 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #10 = { noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #13 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #15 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #16 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #17 = { noreturn }
attributes #18 = { nounwind readnone willreturn }
attributes #19 = { noreturn nounwind }
attributes #20 = { cold }
attributes #21 = { nounwind }

!llvm.linker.options = !{}
!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!"clang version 15.0.3 (https://github.com/llvm/llvm-project.git 4a2c05b05ed07f1f620e94f6524a8b4b2760a0b1)"}
!3 = !{!4, !8, i64 4}
!4 = !{!"_ZTS22UserHeapGcObjectHeader", !5, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !6, i64 7}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!"_ZTS14HeapEntityType", !6, i64 0}
!9 = !{!"_ZTS11GcCellState", !6, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !6, i64 0}
!12 = !{!6, !6, i64 0}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
!15 = !{i64 0, i64 4, !16}
!16 = !{!5, !5, i64 0}
!17 = !{!18, !8, i64 0}
!18 = !{!"_ZTS24SystemHeapGcObjectHeader", !8, i64 0, !9, i64 1}
!19 = !{!"branch_weights", i32 2000, i32 1}
!20 = !{!21, !5, i64 20}
!21 = !{!"_ZTS9Structure", !18, i64 0, !6, i64 2, !6, i64 3, !22, i64 4, !23, i64 8, !6, i64 9, !24, i64 10, !6, i64 12, !6, i64 13, !6, i64 14, !25, i64 15, !26, i64 16, !5, i64 20, !27, i64 24, !6, i64 28}
!22 = !{!"_ZTS17SystemHeapPointerI24StructureAnchorHashTableE", !5, i64 0}
!23 = !{!"_ZTS9ArrayType", !6, i64 0}
!24 = !{!"short", !6, i64 0}
!25 = !{!"_ZTSN9Structure14TransitionKindE", !6, i64 0}
!26 = !{!"_ZTS17SystemHeapPointerI9StructureE", !5, i64 0}
!27 = !{!"_ZTS28SystemHeapPointerTaggedUnionIJ9Structure24StructureTransitionTableEE", !5, i64 0}
!28 = !{!29, !31, i64 1}
!29 = !{!"_ZTS13GetByIdICInfo", !30, i64 0, !31, i64 1, !5, i64 4}
!30 = !{!"_ZTSN13GetByIdICInfo6ICKindE", !6, i64 0}
!31 = !{!"bool", !6, i64 0}
!32 = !{!21, !6, i64 13}
!33 = !{!34, !5, i64 8}
!34 = !{!"_ZTS10HeapString", !5, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !6, i64 7, !5, i64 8, !5, i64 12, !6, i64 16}
!35 = !{!29, !30, i64 0}
!36 = !{!29, !5, i64 4}
!37 = !{!38, !40, i64 24}
!38 = !{!"_ZTS19CacheableDictionary", !18, i64 0, !31, i64 2, !6, i64 3, !5, i64 4, !5, i64 8, !5, i64 12, !11, i64 16, !39, i64 24}
!39 = !{!"_ZTS15UserHeapPointerIvE", !40, i64 0}
!40 = !{!"long", !6, i64 0}
!41 = !{!38, !6, i64 3}
!42 = !{!38, !5, i64 8}
!43 = !{!38, !11, i64 16}
!44 = distinct !{!44, !14}
!45 = !{!46, !5, i64 4}
!46 = !{!"_ZTSN19CacheableDictionary14HashTableEntryE", !47, i64 0, !5, i64 4}
!47 = !{!"_ZTS18GeneralHeapPointerIvE", !5, i64 0}
!48 = distinct !{!48, !14}
!49 = !{i64 0, i64 8, !50}
!50 = !{!40, !40, i64 0}
!51 = !{i64 0, i64 1, !52, i64 1, i64 1, !53, i64 4, i64 4, !16}
!52 = !{!30, !30, i64 0}
!53 = !{!31, !31, i64 0}
!54 = distinct !{!54, !14}
!55 = !{!56, !11, i64 8}
!56 = !{!"_ZTS11TableObject", !57, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !23, i64 7, !11, i64 8, !6, i64 16}
!57 = !{!"_ZTS17SystemHeapPointerIvE", !5, i64 0}
!58 = !{!21, !6, i64 12}
!59 = !{!60, !6, i64 1}
!60 = !{!"_ZTSN9Structure20InlineHashTableEntryE", !6, i64 0, !6, i64 1}
!61 = !{!60, !6, i64 0}
!62 = distinct !{!62, !14}
!63 = !{!21, !6, i64 3}
!64 = distinct !{!64, !14}
!65 = distinct !{!65, !14}
!66 = !{!21, !6, i64 2}
!67 = distinct !{!67, !14}
!68 = !{!69, !5, i64 4}
!69 = !{!"_ZTS24StructureAnchorHashTable", !18, i64 0, !6, i64 2, !6, i64 3, !5, i64 4, !6, i64 8}
!70 = !{!71, !6, i64 0}
!71 = !{!"_ZTSN24StructureAnchorHashTable14HashTableEntryE", !6, i64 0, !6, i64 1}
!72 = !{!71, !6, i64 1}
!73 = distinct !{!73, !14}
!74 = !{!"branch_weights", i32 1, i32 16000, i32 4, i32 2, i32 1}
!75 = !{!"branch_weights", i32 1, i32 4000, i32 1}
!76 = distinct !{!76, !14}
!77 = !{!78, !40, i64 0}
!78 = !{!"_ZTS2VM", !40, i64 0, !79, i64 64, !40, i64 80, !40, i64 88, !5, i64 96, !5, i64 100, !6, i64 104, !80, i64 128, !82, i64 168, !5, i64 176, !79, i64 192, !6, i64 208, !5, i64 212, !5, i64 216, !11, i64 224, !84, i64 232, !6, i64 240, !11, i64 256, !85, i64 264, !86, i64 392, !6, i64 424, !6, i64 472, !11, i64 480, !11, i64 488, !11, i64 496, !39, i64 504, !39, i64 512, !39, i64 520, !39, i64 528, !39, i64 536, !39, i64 544, !11, i64 552, !84, i64 560, !84, i64 568, !57, i64 576}
!79 = !{!"_ZTS13SpdsAllocImplI2VMLb0EE", !11, i64 0, !5, i64 8, !5, i64 12}
!80 = !{!"_ZTSSt5mutex", !81, i64 0}
!81 = !{!"_ZTSSt12__mutex_base", !6, i64 0}
!82 = !{!"_ZTSSt6atomicImE", !83, i64 0}
!83 = !{!"_ZTSSt13__atomic_baseImE", !40, i64 0}
!84 = !{!"_ZTS15UserHeapPointerI10HeapStringE", !40, i64 0}
!85 = !{!"_ZTSSt5arrayI15UserHeapPointerI10HeapStringELm16EE", !6, i64 0}
!86 = !{!"_ZTSSt5arrayI17SystemHeapPointerI9StructureELm7EE", !6, i64 0}
"
            },
            "quickening_slow_path": {
                "ident_func_name": "__deegen_bytecode_Add_0_quickening_slowpath",
                "impl_func_name": "__deegen_bytecode_Add_0_quickening_slowpath_impl",
                "kind": 2,
                "llvm_module": "; ModuleID = '/home/u/project/build/release/annotated/bytecodes/CMakeFiles/deegen_bytecode_definition_ir_source_0.dir/./arithmetic_bytecodes.cpp.o'
source_filename = "/home/u/project/annotated/bytecodes/arithmetic_bytecodes.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, i8, i8, i8, i8 }
%1 = type { i64 }
%2 = type { i32 }
%3 = type { i64 }
%4 = type { i8, i8, i32 }
%5 = type { %6, i8, i8, %7, %8, i8, i16, i8, i8, i8, i8, %9, i32, %10, [0 x %11], [4 x i8] }
%6 = type { i8, i8 }
%7 = type { i32 }
%8 = type { i8 }
%9 = type { i32 }
%10 = type { i32 }
%11 = type { i32 }
%12 = type { %2, i8, i8, i8, %8, ptr, [0 x %3] }
%13 = type { %6, i8, i8, i32, i32, i32, ptr, %1 }
%"class.std::ios_base::Init" = type { i8 }
%"struct.detail::llvm_friendly_std_array" = type { [20 x %struct.tvalue_typecheck_strength_reduction_rule] }
%struct.tvalue_typecheck_strength_reduction_rule = type { i32, i32, ptr, i64 }
%union.U.18 = type { %struct.UserHeapPointer.3 }
%struct.UserHeapPointer.3 = type { i64 }
%union.U.13 = type { %1 }
%union.U = type { %2 }
%union.U.19 = type { %3 }
%class.HeapString = type { i32, i8, i8, i8, i8, i32, i32, [0 x i8] }
%"struct.CacheableDictionary::HashTableEntry" = type { %11, i32 }
%class.VM = type <{ i64, [56 x i8], %class.SpdsAllocImpl, i64, i64, i32, i32, [1 x %struct.SpdsPtr], [20 x i8], %"class.std::mutex", %"struct.std::atomic", i32, [12 x i8], %class.SpdsAllocImpl, [1 x %struct.SpdsPtr], i32, i32, [4 x i8], ptr, %struct.UserHeapPointer.3, [2 x %struct.UserHeapPointer.3], ptr, %"struct.std::array", %"struct.std::array.6", [4 x i8], [6 x %3], [1 x %struct.SystemHeapPointer.7], [4 x i8], ptr, ptr, ptr, %1, %1, %1, %1, %1, %1, ptr addrspace(256), %struct.UserHeapPointer.3, %struct.UserHeapPointer.3, %2, [60 x i8] }>
%"class.std::mutex" = type { %"class.std::__mutex_base" }
%"class.std::__mutex_base" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { ptr, ptr }
%"struct.std::atomic" = type { %"struct.std::__atomic_base" }
%"struct.std::__atomic_base" = type { i64 }
%class.SpdsAllocImpl = type { ptr, i32, i32 }
%struct.SpdsPtr = type { i32 }
%"struct.std::array" = type { [16 x %struct.UserHeapPointer.3] }
%"struct.std::array.6" = type { [7 x %9] }
%struct.SystemHeapPointer.7 = type { i32 }
%union.U.16 = type { %struct.SystemHeapPointer.14 }
%struct.SystemHeapPointer.14 = type { i32 }
%union.U.15 = type { %11 }
%union.U.17 = type { %7 }
%"struct.Structure::InlineHashTableEntry" = type { i8, i8 }
%class.StructureAnchorHashTable = type { %6, i8, i8, i32, [0 x %struct.SystemHeapPointer.14] }
%"struct.StructureAnchorHashTable::HashTableEntry" = type { i8, i8 }

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue = comdat any

$_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tTopEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tBottomEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tTableEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tThreadEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tStringEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tMIVEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI5tBoolEb6TValue = comdat any

$_Z19DeegenImpl_TValueIsI4tNilEb6TValue = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_ = comdat any

$_Z20WriteBarrierSlowPathPvPh = comdat any

$_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_ = comdat any

$_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_ = comdat any

$_Z17FireReleaseAssertPKcS0_jS0_ = comdat any

$_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo = comdat any

$_Z47TryDoBinaryOperationConsideringStringConversion6TValueS_17LuaMetamethodKind = comdat any

$_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind = comdat any

$_Z25GetCallTargetViaMetatable6TValue = comdat any

$_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue = comdat any

$_Z19DeegenImpl_TValueAsI6tTableEDa6TValue = comdat any

$_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo = comdat any

$_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj = comdat any

$_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj = comdat any

$_Z20GetMetatableForValue6TValue = comdat any

$_Z19DeegenImpl_TValueAsI9tFunctionEDa6TValue = comdat any

$x_list_of_tvalue_typecheck_strength_reduction_rules = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@x_list_of_tvalue_typecheck_strength_reduction_rules = linkonce_odr dso_local constant %"struct.detail::llvm_friendly_std_array" { [20 x %struct.tvalue_typecheck_strength_reduction_rule] [%struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 992, ptr @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1023, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tTopEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 0, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue, i64 0 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 992, i32 1023, ptr @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 512, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tTableEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 256, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 128, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 64, i32 1023, ptr @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 32, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tStringEb6TValue, i64 100 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 12, i32 1023, ptr @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue, i64 20 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 16, i32 1023, ptr @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 8, i32 1023, ptr @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 4, i32 1023, ptr @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue, i64 10 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 3, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue, i64 30 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 2, i32 1023, ptr @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue, i64 60 }, %struct.tvalue_typecheck_strength_reduction_rule { i32 1, i32 1023, ptr @_Z19DeegenImpl_TValueIsI4tNilEb6TValue, i64 10 }] }, comdat, align 8
@.str.8 = private unnamed_addr constant [25 x i8] c"false && \22unimplemented\22\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"/home/u/project/runtime/runtime_utils.h\00", align 1
@__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh = private unnamed_addr constant [45 x i8] c"void WriteBarrierSlowPath(void *, uint8_t *)\00", align 1
@stderr = external dso_local local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [35 x i8] c"%s:%u: %s: Assertion `%s' failed.\0A\00", align 1
@.str.11 = private unnamed_addr constant [39 x i8] c"Invalid types for arithmetic operation\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"/home/u/project/runtime/table_object.h\00", align 1
@__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_ = private unnamed_addr constant [124 x i8] c"static TableObject::GetMetatableResult TableObject::GetMetatable(T) [T = __attribute__((address_space(256))) TableObject *]\00", align 1
@__PRETTY_FUNCTION__._Z20GetMetatableForValue6TValue = private unnamed_addr constant [51 x i8] c"UserHeapPointer<void> GetMetatableForValue(TValue)\00", align 1
@__PRETTY_FUNCTION__._Z25GetCallTargetViaMetatable6TValue = private unnamed_addr constant [58 x i8] c"HeapPtr<FunctionObject> GetCallTargetViaMetatable(TValue)\00", align 1
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp, ptr null }]
@__deegen_llvm_repeated_inlining_inhibitor_recorder = constant [11 x ptr] [ptr @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo, ptr @_Z20WriteBarrierSlowPathPvPh, ptr @_Z17FireReleaseAssertPKcS0_jS0_, ptr @_GLOBAL__sub_I_arithmetic_bytecodes.cpp, ptr @__deegen_bytecode_Add_0_quickening_slowpath_impl, ptr @__deegen_bytecode_Add_0_retcont_0_impl, ptr @_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo, ptr @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj, ptr @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj, ptr @_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind, ptr @_Z20GetMetatableForValue6TValue]
@llvm.used = appending global [1 x ptr] [ptr @__deegen_llvm_repeated_inlining_inhibitor_recorder], section "llvm.metadata"
@llvm.compiler.used = appending global [1 x ptr] [ptr @x_list_of_tvalue_typecheck_strength_reduction_rules], section "llvm.metadata"

declare dso_local void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #0

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(ptr, ptr, ptr) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tString11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 0
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tFunction11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 1
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI9tUserdata11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 2
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI7tThread11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 3
  ret i1 %5
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN47tvalue_typecheck_strength_reduction_impl_holderI6tTable11tHeapEntityE4implE6TValue(i64 %0) #3 comdat align 2 {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  %3 = getelementptr inbounds %0, ptr addrspace(256) %2, i64 0, i32 1
  %4 = load i8, ptr addrspace(256) %3, align 4, !tbaa !3
  %5 = icmp eq i8 %4, 4
  ret i1 %5
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tTopEb6TValue(i64 %0) #4 comdat {
  ret i1 true
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tBottomEb6TValue(i64 %0) #4 comdat {
  ret i1 false
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tTableEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN6tTable5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 4
  br label %_ZN6tTable5checkE6TValue.exit

_ZN6tTable5checkE6TValue.exit:                    ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tThreadEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tThread5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 3
  br label %_ZN7tThread5checkE6TValue.exit

_ZN7tThread5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tUserdataEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tUserdata5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 2
  br label %_ZN9tUserdata5checkE6TValue.exit

_ZN9tUserdata5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN9tFunction5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 1
  br label %_ZN9tFunction5checkE6TValue.exit

_ZN9tFunction5checkE6TValue.exit:                 ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %0) #5 comdat {
  %2 = icmp ugt i64 %0, -844429225099137
  br i1 %2, label %3, label %_ZN7tString5checkE6TValue.exit

3:                                                ; preds = %1
  %4 = inttoptr i64 %0 to ptr addrspace(256)
  %5 = getelementptr inbounds %0, ptr addrspace(256) %4, i64 0, i32 1
  %6 = load i8, ptr addrspace(256) %5, align 4, !tbaa !3
  %7 = icmp eq i8 %6, 0
  br label %_ZN7tString5checkE6TValue.exit

_ZN7tString5checkE6TValue.exit:                   ; preds = %1, %3
  %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.reg2mem1.i.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #4 comdat {
  %2 = icmp ult i64 %0, -1125904201809920
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tInt32Eb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -1125904201809920
  %3 = icmp eq i64 %2, -1125904201809920
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI10tDoubleNaNEb6TValue(i64 %0) #4 comdat {
  %2 = icmp eq i64 %0, 9221120237041090560
  ret i1 %2
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI13tDoubleNotNaNEb6TValue(i64 %0) #4 comdat {
  %2 = bitcast i64 %0 to double
  %3 = fcmp ord double %2, 0.000000e+00
  ret i1 %3
}

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue(i64 %0) #4 comdat {
  %2 = and i64 %0, -844429225099264
  %3 = icmp eq i64 %2, -844429225099264
  ret i1 %3
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI5tBoolEb6TValue(i64 %0) #5 comdat {
_ZN5tBool5checkE6TValue.exit:
  %1 = and i64 %0, -844429225099264
  %2 = icmp eq i64 %1, -844429225099264
  %3 = icmp ne i64 %0, -844429225099137
  %spec.select = and i1 %3, %2
  ret i1 %spec.select
}

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %0) #5 comdat {
  %2 = icmp eq i64 %0, -844429225099137
  ret i1 %2
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #20
  unreachable
}

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #7

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef %1) local_unnamed_addr #8 comdat {
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.9, i32 noundef 81, ptr noundef nonnull @__PRETTY_FUNCTION__._Z20WriteBarrierSlowPathPvPh) #20
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm5EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #9 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 5
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #20
  unreachable
}

; Function Attrs: mustprogress noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPhvEvT0_(ptr noundef %0) local_unnamed_addr #6 comdat {
  %2 = getelementptr inbounds i8, ptr %0, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %0, ptr noundef nonnull %2) #20
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define weak_odr dso_local void @_Z25WriteBarrierSlowPathEnterILm1EPU5AS256hvEvT0_(ptr addrspace(256) noundef %0) local_unnamed_addr #9 comdat {
  %2 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %3 = ptrtoint ptr %2 to i64
  %4 = ptrtoint ptr addrspace(256) %0 to i64
  %5 = add i64 %3, %4
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds i8, ptr %6, i64 1
  tail call void @_Z20WriteBarrierSlowPathPvPh(ptr noundef %6, ptr noundef nonnull %7) #20
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @__deegen_bytecode_Add_0_quickening_slowpath_impl(i64 %0, i64 %1) local_unnamed_addr #10 {
  %3 = alloca %union.U.18, align 8
  %4 = alloca %union.U.13, align 8
  %5 = alloca %union.U, align 4
  %6 = alloca %union.U.19, align 8
  %7 = alloca %4, align 8
  %8 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #21
  br i1 %8, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %2
  %9 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %1) #21
  br i1 %9, label %10, label %.critedge, !prof !12

10:                                               ; preds = %._crit_edge
  %11 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %0) #21
  %12 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %1) #21
  %13 = fadd double %11, %12
  %14 = bitcast double %13 to i64
  tail call void @DeegenImpl_ReturnValue(i64 %14) #19
  unreachable

.critedge:                                        ; preds = %._crit_edge, %2
  %15 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI6tTableEb6TValue(i64 %0) #21
  br i1 %15, label %16, label %._crit_edge1, !prof !12

16:                                               ; preds = %.critedge
  %17 = tail call noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI6tTableEDa6TValue(i64 %0) #21
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #22
  br label %18

18:                                               ; preds = %20, %16
  %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem161.0.reg2mem292.0 = phi i64 [ 0, %16 ], [ %24, %20 ]
  %19 = icmp ult i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem161.0.reg2mem292.0, 4
  br i1 %19, label %20, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i

20:                                               ; preds = %18
  %21 = getelementptr inbounds i8, ptr addrspace(256) %17, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem161.0.reg2mem292.0
  %22 = load i8, ptr addrspace(256) %21, align 1, !tbaa !13
  %23 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem161.0.reg2mem292.0
  store i8 %22, ptr %23, align 1, !tbaa !13
  %24 = add nuw nsw i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem161.0.reg2mem292.0, 1
  br label %18, !llvm.loop !14

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %18
  %.sroa.019.0.copyload.i = load i32, ptr %5, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #22
  %25 = zext i32 %.sroa.019.0.copyload.i to i64
  %26 = inttoptr i64 %25 to ptr addrspace(256)
  %27 = load i8, ptr addrspace(256) %26, align 1, !tbaa !18
  switch i8 %27, label %66 [
    i8 9, label %28
    i8 11, label %57
  ], !prof !20

28:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %29 = getelementptr inbounds %5, ptr addrspace(256) %26, i64 0, i32 12
  %30 = load i32, ptr addrspace(256) %29, align 4, !tbaa !21
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %._crit_edge1, label %32

32:                                               ; preds = %28
  %33 = icmp slt i32 %30, 0
  br i1 %33, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread62, label %36

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread62: ; preds = %32
  %34 = sext i32 %30 to i64
  %35 = shl nsw i64 %34, 3
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge

36:                                               ; preds = %32
  %37 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %38 = ptrtoint ptr %37 to i64
  %39 = ptrtoint ptr addrspace(256) %17 to i64
  %40 = add i64 %38, %39
  %41 = inttoptr i64 %40 to ptr
  %42 = add nsw i32 %30, -1
  %43 = getelementptr inbounds %5, ptr addrspace(256) %26, i64 0, i32 8
  %44 = load i8, ptr addrspace(256) %43, align 1, !tbaa !29
  %45 = zext i8 %44 to i32
  %46 = icmp ult i32 %42, %45
  br i1 %46, label %47, label %50

47:                                               ; preds = %36
  %48 = zext i32 %42 to i64
  %49 = getelementptr inbounds %12, ptr %41, i64 0, i32 6, i64 %48
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

50:                                               ; preds = %36
  %51 = sub nsw i32 %45, %30
  %52 = getelementptr inbounds %12, ptr %41, i64 0, i32 5
  %53 = load ptr, ptr %52, align 8, !tbaa !30
  %54 = sext i32 %51 to i64
  %55 = getelementptr inbounds %3, ptr %53, i64 %54
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i: ; preds = %50, %47
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0 = phi ptr [ %49, %47 ], [ %55, %50 ]
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i = load i64, ptr %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0, align 8
  %56 = icmp eq i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, -844429225099137
  br i1 %56, label %._crit_edge1, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

57:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %58 = getelementptr inbounds %13, ptr addrspace(256) %26, i64 0, i32 7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #22
  br label %59

59:                                               ; preds = %61, %57
  %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem159.0.reg2mem290.0 = phi i64 [ 0, %57 ], [ %65, %61 ]
  %60 = icmp ult i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem159.0.reg2mem290.0, 8
  br i1 %60, label %61, label %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i

61:                                               ; preds = %59
  %62 = getelementptr inbounds i8, ptr addrspace(256) %58, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem159.0.reg2mem290.0
  %63 = load i8, ptr addrspace(256) %62, align 1, !tbaa !13
  %64 = getelementptr inbounds [8 x i8], ptr %4, i64 0, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem159.0.reg2mem290.0
  store i8 %63, ptr %64, align 1, !tbaa !13
  %65 = add nuw nsw i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem159.0.reg2mem290.0, 1
  br label %59, !llvm.loop !33

_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %59
  %.sroa.026.0.copyload.i = load i64, ptr %4, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #22
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

66:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2359, ptr noundef nonnull @__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_) #20
  unreachable

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit: ; preds = %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i
  %.sroa.029.0.i.reg2mem157.0.reg2mem288.0 = phi i64 [ %.sroa.026.0.copyload.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i ], [ %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i ]
  %.not166 = icmp eq i64 %.sroa.029.0.i.reg2mem157.0.reg2mem288.0, 0
  br i1 %.not166, label %._crit_edge1, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge: ; preds = %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread62
  %.sroa.029.0.i68.reg2mem.0.reg2mem.0 = phi i64 [ %35, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread62 ], [ %.sroa.029.0.i.reg2mem157.0.reg2mem288.0, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit ]
  %67 = inttoptr i64 %.sroa.029.0.i68.reg2mem.0.reg2mem.0 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #22
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #22
  br label %68

68:                                               ; preds = %70, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem155.0.reg2mem286.0 = phi i64 [ 0, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge ], [ %74, %70 ]
  %69 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem155.0.reg2mem286.0, 8
  br i1 %69, label %70, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit

70:                                               ; preds = %68
  %71 = getelementptr inbounds i8, ptr addrspace(256) inttoptr (i64 272 to ptr addrspace(256)), i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem155.0.reg2mem286.0
  %72 = load i8, ptr addrspace(256) %71, align 1, !tbaa !13
  %73 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem155.0.reg2mem286.0
  store i8 %72, ptr %73, align 1, !tbaa !13
  %74 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem155.0.reg2mem286.0, 1
  br label %68, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit: ; preds = %68
  %.sroa.08.0.copyload.i = load i64, ptr %3, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #22
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef %67, i64 %.sroa.08.0.copyload.i, ptr noundef nonnull align 4 dereferenceable(8) %7)
  br label %75

75:                                               ; preds = %77, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i52.reg2mem153.0.reg2mem284.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit ], [ %78, %77 ]
  %76 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i52.reg2mem153.0.reg2mem284.0, 8
  br i1 %76, label %77, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit54

77:                                               ; preds = %75
  %78 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i52.reg2mem153.0.reg2mem284.0, 1
  br label %75, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit54: ; preds = %75
  %.sroa.026.0.copyload = load i64, ptr %7, align 8, !tbaa.struct !38
  %.sroa.054.0.extract.trunc = trunc i64 %.sroa.026.0.copyload to i8
  %79 = add i8 %.sroa.054.0.extract.trunc, -1
  %80 = icmp ult i8 %79, 2
  br i1 %80, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit, label %81

81:                                               ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit54
  %82 = icmp eq i8 %.sroa.054.0.extract.trunc, 3
  br i1 %82, label %83, label %93

83:                                               ; preds = %81
  %84 = ashr i64 %.sroa.026.0.copyload, 32
  %85 = getelementptr inbounds %12, ptr addrspace(256) %67, i64 0, i32 6, i64 %84
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #22
  br label %86

86:                                               ; preds = %88, %83
  %.0.reg2mem207.0.reg2mem264.0.reg2mem36.0.reg2mem151.0.reg2mem282.0 = phi i64 [ 0, %83 ], [ %92, %88 ]
  %87 = icmp ult i64 %.0.reg2mem207.0.reg2mem264.0.reg2mem36.0.reg2mem151.0.reg2mem282.0, 8
  br i1 %87, label %88, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit

88:                                               ; preds = %86
  %89 = getelementptr inbounds i8, ptr addrspace(256) %85, i64 %.0.reg2mem207.0.reg2mem264.0.reg2mem36.0.reg2mem151.0.reg2mem282.0
  %90 = load i8, ptr addrspace(256) %89, align 1, !tbaa !13
  %91 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 %.0.reg2mem207.0.reg2mem264.0.reg2mem36.0.reg2mem151.0.reg2mem282.0
  store i8 %90, ptr %91, align 1, !tbaa !13
  %92 = add nuw nsw i64 %.0.reg2mem207.0.reg2mem264.0.reg2mem36.0.reg2mem151.0.reg2mem282.0, 1
  br label %86, !llvm.loop !43

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit:      ; preds = %86
  %.sroa.095.0.copyload = load i64, ptr %6, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #22
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

93:                                               ; preds = %81
  %94 = icmp eq i8 %.sroa.054.0.extract.trunc, 4
  call void @llvm.assume(i1 %94)
  %95 = getelementptr inbounds %12, ptr addrspace(256) %67, i64 0, i32 5
  %96 = load ptr, ptr addrspace(256) %95, align 8, !tbaa !30
  %97 = ashr i64 %.sroa.026.0.copyload, 32
  %98 = getelementptr inbounds %3, ptr %96, i64 %97
  %.sroa.0.0.copyload.i = load i64, ptr %98, align 8, !tbaa.struct !34
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit54, %93, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit
  %.sroa.061.0.reg2mem205.0.reg2mem262.0.reg2mem34.0.reg2mem149.0.reg2mem280.0 = phi i64 [ %.sroa.095.0.copyload, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit ], [ %.sroa.0.0.copyload.i, %93 ], [ -844429225099137, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit54 ]
  %99 = call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %.sroa.061.0.reg2mem205.0.reg2mem262.0.reg2mem34.0.reg2mem149.0.reg2mem280.0) #21
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #22
  br i1 %99, label %._crit_edge1, label %._crit_edge4

._crit_edge1:                                     ; preds = %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %28, %.critedge
  %100 = call { i8, double } @_Z47TryDoBinaryOperationConsideringStringConversion6TValueS_17LuaMetamethodKind(i64 %0, i64 %1, i32 noundef 1)
  %.fca.0.extract = extractvalue { i8, double } %100, 0
  %101 = and i8 %.fca.0.extract, 1
  %.not = icmp eq i8 %101, 0
  br i1 %.not, label %104, label %102, !prof !12

102:                                              ; preds = %._crit_edge1
  %.fca.1.extract = extractvalue { i8, double } %100, 1
  %103 = bitcast double %.fca.1.extract to i64
  call void @DeegenImpl_ReturnValue(i64 %103) #19
  unreachable

104:                                              ; preds = %._crit_edge1
  %105 = call i64 @_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind(i64 %0, i64 %1, i32 noundef 1)
  %106 = call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %105) #21
  br i1 %106, label %107, label %._crit_edge4

107:                                              ; preds = %104
  call void @DeegenImpl_ThrowErrorCString(ptr noundef nonnull @.str.11) #19
  unreachable

._crit_edge4:                                     ; preds = %104, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit
  %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0 = phi i64 [ %.sroa.061.0.reg2mem205.0.reg2mem262.0.reg2mem34.0.reg2mem149.0.reg2mem280.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit ], [ %105, %104 ]
  %108 = call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue(i64 %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0) #21
  br i1 %108, label %109, label %112, !prof !12

109:                                              ; preds = %._crit_edge4
  %110 = call noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI9tFunctionEDa6TValue(i64 %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0) #21
  %111 = ptrtoint ptr addrspace(256) %110 to i64
  call void @__DeegenInternal_AstMakeCallIdentificationFunc_0(i1 false, i1 false, i1 false, i64 %111, ptr nonnull @__deegen_bytecode_Add_0_retcont_0_impl, i64 0, i64 %0, i64 %1)
  unreachable

112:                                              ; preds = %._crit_edge4
  %113 = call noundef ptr addrspace(256) @_Z25GetCallTargetViaMetatable6TValue(i64 %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0)
  %114 = icmp eq ptr addrspace(256) %113, null
  br i1 %114, label %115, label %117, !prof !44

115:                                              ; preds = %112
  %116 = call i64 @_Z31MakeErrorMessageForUnableToCall6TValue(i64 %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0) #22
  call void @DeegenImpl_ThrowErrorTValue(i64 %116) #19
  unreachable

117:                                              ; preds = %112
  %118 = ptrtoint ptr addrspace(256) %113 to i64
  call void @__DeegenInternal_AstMakeCallIdentificationFunc_1(i1 false, i1 false, i1 false, i64 %118, ptr nonnull @__deegen_bytecode_Add_0_retcont_0_impl, i64 0, i64 %.sroa.0.2.reg2mem199.0.reg2mem256.0.reg2mem32.0.reg2mem147.0.reg2mem278.0, i64 %0, i64 %1)
  unreachable
}

; Function Attrs: argmemonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #7

; Function Attrs: inlinehint mustprogress noreturn nounwind uwtable
define linkonce_odr dso_local void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3) local_unnamed_addr #8 comdat {
  %5 = load ptr, ptr @stderr, align 8, !tbaa !10
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.10, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %0) #23
  tail call void @abort() #19
  unreachable
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #12

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef %0, i64 %1, ptr noundef nonnull align 4 dereferenceable(8) %2) local_unnamed_addr #13 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = alloca %union.U, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #22
  br label %6

6:                                                ; preds = %8, %3
  %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0 = phi i64 [ 0, %3 ], [ %12, %8 ]
  %7 = icmp ult i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0, 4
  br i1 %7, label %8, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit

8:                                                ; preds = %6
  %9 = getelementptr inbounds i8, ptr addrspace(256) %0, i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0
  %10 = load i8, ptr addrspace(256) %9, align 1, !tbaa !13
  %11 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0
  store i8 %10, ptr %11, align 1, !tbaa !13
  %12 = add nuw nsw i64 %.0.reg2mem15.0.reg2mem23.0.reg2mem4.0.reg2mem52.0.reg2mem115.0, 1
  br label %6, !llvm.loop !14

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit: ; preds = %6
  %.sroa.011.0.copyload = load i32, ptr %5, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #22
  %13 = zext i32 %.sroa.011.0.copyload to i64
  %14 = inttoptr i64 %13 to ptr addrspace(256)
  %15 = load i8, ptr addrspace(256) %14, align 1, !tbaa !18
  %16 = icmp eq i8 %15, 9
  br i1 %16, label %17, label %40, !prof !12

17:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit
  %18 = getelementptr inbounds %5, ptr addrspace(256) %14, i64 0, i32 12
  %19 = load i32, ptr addrspace(256) %18, align 4, !tbaa !21
  %20 = icmp ne i32 %19, 0
  %21 = getelementptr inbounds %4, ptr %2, i64 0, i32 1
  %22 = zext i1 %20 to i8
  store i8 %22, ptr %21, align 1, !tbaa !45
  %23 = getelementptr inbounds %5, ptr addrspace(256) %14, i64 0, i32 8
  %24 = load i8, ptr addrspace(256) %23, align 1, !tbaa !29
  %25 = zext i8 %24 to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #22
  %26 = inttoptr i64 %1 to ptr addrspace(256)
  %27 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %26, i64 0, i32 5
  %28 = load i32, ptr addrspace(256) %27, align 8, !tbaa !47
  %29 = call noundef zeroext i1 @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj(ptr addrspace(256) noundef %14, i64 %1, i32 noundef %28, ptr noundef nonnull align 4 dereferenceable(4) %4)
  br i1 %29, label %30, label %39

30:                                               ; preds = %17
  %31 = load i32, ptr %4, align 4, !tbaa !17
  %32 = icmp ult i32 %31, %25
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  store i8 3, ptr %2, align 4, !tbaa !49
  %34 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %31, ptr %34, align 4, !tbaa !50
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

35:                                               ; preds = %30
  store i8 4, ptr %2, align 4, !tbaa !49
  %36 = xor i32 %31, -1
  %37 = add i32 %36, %25
  %38 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %37, ptr %38, align 4, !tbaa !50
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

39:                                               ; preds = %17
  store i8 1, ptr %2, align 4, !tbaa !49
  br label %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i

_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i: ; preds = %39, %35, %33
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #22
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

40:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit
  %41 = icmp eq i8 %15, 11
  tail call void @llvm.assume(i1 %41)
  %42 = getelementptr inbounds %13, ptr addrspace(256) %14, i64 0, i32 7
  %43 = load i64, ptr addrspace(256) %42, align 8, !tbaa !51
  %44 = icmp ne i64 %43, 0
  %45 = getelementptr inbounds %4, ptr %2, i64 0, i32 1
  %46 = zext i1 %44 to i8
  store i8 %46, ptr %45, align 1, !tbaa !45
  %47 = getelementptr inbounds %13, ptr addrspace(256) %14, i64 0, i32 2
  %48 = load i8, ptr addrspace(256) %47, align 1, !tbaa !54
  %49 = zext i8 %48 to i32
  %50 = inttoptr i64 %1 to ptr addrspace(256)
  %51 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %50, i64 0, i32 5
  %52 = load i32, ptr addrspace(256) %51, align 8, !tbaa !47
  %53 = getelementptr inbounds %13, ptr addrspace(256) %14, i64 0, i32 4
  %54 = load i32, ptr addrspace(256) %53, align 8, !tbaa !55
  %55 = zext i32 %54 to i64
  %56 = and i32 %54, %52
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %1, 3
  %59 = trunc i64 %58 to i32
  %.phi.trans.insert.i.i = getelementptr inbounds %13, ptr addrspace(256) %14, i64 0, i32 6
  %.pre.i.i = load ptr, ptr addrspace(256) %.phi.trans.insert.i.i, align 8, !tbaa !56
  br label %._crit_edge20.i.i

._crit_edge20.i.i:                                ; preds = %._crit_edge.i.i, %40
  %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0 = phi i64 [ %57, %40 ], [ %65, %._crit_edge.i.i ]
  %60 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0
  %.sroa.016.0.copyload.i.i = load i32, ptr %60, align 4, !tbaa.struct !16
  %61 = icmp eq i32 %.sroa.016.0.copyload.i.i, 0
  br i1 %61, label %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i, label %62

62:                                               ; preds = %._crit_edge20.i.i
  %63 = icmp eq i32 %.sroa.016.0.copyload.i.i, %59
  br i1 %63, label %66, label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %62
  %64 = add nsw i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0, 1
  %65 = and i64 %64, %55
  br label %._crit_edge20.i.i, !llvm.loop !57

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.i.reg2mem50.0.reg2mem113.0, i32 1
  %68 = load i32, ptr %67, align 4, !tbaa !58
  %69 = icmp ult i32 %68, %49
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  store i8 3, ptr %2, align 4, !tbaa !49
  %71 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %68, ptr %71, align 4, !tbaa !50
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

72:                                               ; preds = %66
  store i8 4, ptr %2, align 4, !tbaa !49
  %73 = xor i32 %68, -1
  %74 = add i32 %73, %49
  %75 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %74, ptr %75, align 4, !tbaa !50
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i: ; preds = %._crit_edge20.i.i
  store i8 2, ptr %2, align 4, !tbaa !49
  br label %_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit

_ZN11TableObject18PrepareGetByIdImplI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit: ; preds = %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit.i, %72, %70, %_ZN11TableObject30PrepareGetByIdImplForStructureI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo.exit.i
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dso_local { i8, double } @_Z47TryDoBinaryOperationConsideringStringConversion6TValueS_17LuaMetamethodKind(i64 %0, i64 %1, i32 noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %0) #21
  br i1 %4, label %.critedge, label %._crit_edge

._crit_edge:                                      ; preds = %3
  %5 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %1) #21
  br i1 %5, label %.critedge.thread, label %._crit_edge1, !prof !44

.critedge:                                        ; preds = %3
  %6 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #21
  br i1 %6, label %.critedge._crit_edge, label %9

.critedge.thread:                                 ; preds = %._crit_edge
  %7 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %0) #21
  br i1 %7, label %.critedge._crit_edge, label %._crit_edge1

.critedge._crit_edge:                             ; preds = %.critedge.thread, %.critedge
  %8 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %0) #21
  br label %23

9:                                                ; preds = %.critedge
  %10 = inttoptr i64 %0 to ptr addrspace(256)
  %11 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %10, i64 0, i32 7
  %12 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %13 = ptrtoint ptr %12 to i64
  %14 = ptrtoint ptr addrspace(256) %11 to i64
  %15 = add i64 %13, %14
  %16 = inttoptr i64 %15 to ptr
  %17 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %10, i64 0, i32 6
  %18 = load i32, ptr addrspace(256) %17, align 4, !tbaa !61
  %19 = zext i32 %18 to i64
  %20 = tail call { i32, i64 } @_Z40TryConvertStringToDoubleWithLuaSemanticsPKvm(ptr noundef %16, i64 noundef %19) #22
  %.fca.0.extract140 = extractvalue { i32, i64 } %20, 0
  %21 = icmp eq i32 %.fca.0.extract140, 1
  br i1 %21, label %._crit_edge61, label %._crit_edge1

._crit_edge61:                                    ; preds = %9
  %.fca.1.extract141 = extractvalue { i32, i64 } %20, 1
  %22 = bitcast i64 %.fca.1.extract141 to double
  br label %23

23:                                               ; preds = %._crit_edge61, %.critedge._crit_edge
  %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0 = phi double [ %8, %.critedge._crit_edge ], [ %22, %._crit_edge61 ]
  %24 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tDoubleEb6TValue(i64 %1) #21
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = tail call noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %1) #21
  br label %43

27:                                               ; preds = %23
  %28 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI7tStringEb6TValue(i64 %1) #21
  br i1 %28, label %29, label %._crit_edge1

29:                                               ; preds = %27
  %30 = inttoptr i64 %1 to ptr addrspace(256)
  %31 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %30, i64 0, i32 7
  %32 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %33 = ptrtoint ptr %32 to i64
  %34 = ptrtoint ptr addrspace(256) %31 to i64
  %35 = add i64 %33, %34
  %36 = inttoptr i64 %35 to ptr
  %37 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %30, i64 0, i32 6
  %38 = load i32, ptr addrspace(256) %37, align 4, !tbaa !61
  %39 = zext i32 %38 to i64
  %40 = tail call { i32, i64 } @_Z40TryConvertStringToDoubleWithLuaSemanticsPKvm(ptr noundef %36, i64 noundef %39) #22
  %.fca.0.extract144 = extractvalue { i32, i64 } %40, 0
  %41 = icmp eq i32 %.fca.0.extract144, 1
  br i1 %41, label %._crit_edge64, label %._crit_edge1

._crit_edge64:                                    ; preds = %29
  %.fca.1.extract145 = extractvalue { i32, i64 } %40, 1
  %42 = bitcast i64 %.fca.1.extract145 to double
  br label %43

43:                                               ; preds = %._crit_edge64, %25
  %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0 = phi double [ %26, %25 ], [ %42, %._crit_edge64 ]
  switch i32 %2, label %59 [
    i32 1, label %44
    i32 2, label %46
    i32 3, label %48
    i32 4, label %50
    i32 5, label %52
    i32 6, label %57
  ]

44:                                               ; preds = %43
  %45 = fadd double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0
  br label %._crit_edge1

46:                                               ; preds = %43
  %47 = fsub double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0
  br label %._crit_edge1

48:                                               ; preds = %43
  %49 = fmul double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0
  br label %._crit_edge1

50:                                               ; preds = %43
  %51 = fdiv double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0
  br label %._crit_edge1

52:                                               ; preds = %43
  %53 = fdiv double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0
  %54 = tail call double @llvm.floor.f64(double %53)
  %55 = fneg double %54
  %56 = tail call double @llvm.fmuladd.f64(double %55, double %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0, double %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0)
  br label %._crit_edge1

57:                                               ; preds = %43
  %58 = tail call double @pow(double noundef %.1.reg2mem95.0.reg2mem139.0.reg2mem39.0.reg2mem90.0.reg2mem138.0, double noundef %.151.reg2mem93.0.reg2mem137.0.reg2mem37.0.reg2mem88.0.reg2mem136.0) #22
  br label %._crit_edge1

59:                                               ; preds = %43
  unreachable

._crit_edge1:                                     ; preds = %29, %27, %9, %.critedge.thread, %._crit_edge, %57, %52, %50, %48, %46, %44
  %.sroa.12.5.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi double [ %58, %57 ], [ %56, %52 ], [ %51, %50 ], [ %49, %48 ], [ %47, %46 ], [ %45, %44 ], [ 0.000000e+00, %._crit_edge ], [ 0.000000e+00, %.critedge.thread ], [ 0.000000e+00, %9 ], [ 0.000000e+00, %27 ], [ 0.000000e+00, %29 ]
  %.sroa.027.5.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i8 [ 1, %57 ], [ 1, %52 ], [ 1, %50 ], [ 1, %48 ], [ 1, %46 ], [ 1, %44 ], [ 0, %._crit_edge ], [ 0, %.critedge.thread ], [ 0, %9 ], [ 0, %27 ], [ 0, %29 ]
  %.fca.0.insert = insertvalue { i8, double } poison, i8 %.sroa.027.5.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0, 0
  %.fca.1.insert = insertvalue { i8, double } %.fca.0.insert, double %.sroa.12.5.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0, 1
  ret { i8, double } %.fca.1.insert
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local i64 @_Z41GetMetamethodForBinaryArithmeticOperation6TValueS_17LuaMetamethodKind(i64 %0, i64 %1, i32 noundef %2) local_unnamed_addr #3 comdat {
  %4 = alloca %union.U.18, align 8
  %5 = alloca %union.U.18, align 8
  %6 = alloca %union.U.19, align 8
  %7 = alloca %union.U.19, align 8
  %8 = alloca %4, align 8
  %9 = alloca %4, align 8
  %10 = tail call i64 @_Z20GetMetatableForValue6TValue(i64 %0)
  %.not = icmp eq i64 %10, 0
  br i1 %.not, label %._crit_edge, label %11

11:                                               ; preds = %3
  %12 = inttoptr i64 %10 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #22
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds %struct.UserHeapPointer.3, ptr addrspace(256) inttoptr (i64 264 to ptr addrspace(256)), i64 %13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #22
  br label %15

15:                                               ; preds = %17, %11
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0 = phi i64 [ 0, %11 ], [ %21, %17 ]
  %16 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0, 8
  br i1 %16, label %17, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit

17:                                               ; preds = %15
  %18 = getelementptr inbounds i8, ptr addrspace(256) %14, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !13
  %20 = getelementptr inbounds [8 x i8], ptr %5, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0
  store i8 %19, ptr %20, align 1, !tbaa !13
  %21 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.reg2mem150.0.reg2mem247.0, 1
  br label %15, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit: ; preds = %15
  %.sroa.08.0.copyload.i = load i64, ptr %5, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #22
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef nonnull %12, i64 %.sroa.08.0.copyload.i, ptr noundef nonnull align 4 dereferenceable(8) %8)
  br label %22

22:                                               ; preds = %24, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit ], [ %25, %24 ]
  %23 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0, 8
  br i1 %23, label %24, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67

24:                                               ; preds = %22
  %25 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i65.reg2mem148.0.reg2mem245.0, 1
  br label %22, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67: ; preds = %22
  %.sroa.014.0.copyload = load i64, ptr %8, align 8, !tbaa.struct !38
  %.sroa.039.0.extract.trunc = trunc i64 %.sroa.014.0.copyload to i8
  %26 = add i8 %.sroa.039.0.extract.trunc, -1
  %27 = icmp ult i8 %26, 2
  br i1 %27, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread, label %28

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #22
  br label %._crit_edge

28:                                               ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit67
  %29 = icmp eq i8 %.sroa.039.0.extract.trunc, 3
  br i1 %29, label %30, label %40

30:                                               ; preds = %28
  %31 = ashr i64 %.sroa.014.0.copyload, 32
  %32 = getelementptr inbounds %12, ptr addrspace(256) %12, i64 0, i32 6, i64 %31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #22
  br label %33

33:                                               ; preds = %35, %30
  %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0 = phi i64 [ 0, %30 ], [ %39, %35 ]
  %34 = icmp ult i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0, 8
  br i1 %34, label %35, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6

35:                                               ; preds = %33
  %36 = getelementptr inbounds i8, ptr addrspace(256) %32, i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0
  %37 = load i8, ptr addrspace(256) %36, align 1, !tbaa !13
  %38 = getelementptr inbounds [8 x i8], ptr %6, i64 0, i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0
  store i8 %37, ptr %38, align 1, !tbaa !13
  %39 = add nuw nsw i64 %.0.reg2mem123.0.reg2mem190.0.reg2mem48.0.reg2mem146.0.reg2mem243.0, 1
  br label %33, !llvm.loop !43

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6:     ; preds = %33
  %.sroa.067.0.copyload = load i64, ptr %6, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #22
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5

40:                                               ; preds = %28
  %41 = icmp eq i8 %.sroa.039.0.extract.trunc, 4
  call void @llvm.assume(i1 %41)
  %42 = getelementptr inbounds %12, ptr addrspace(256) %12, i64 0, i32 5
  %43 = load ptr, ptr addrspace(256) %42, align 8, !tbaa !30
  %44 = ashr i64 %.sroa.014.0.copyload, 32
  %45 = getelementptr inbounds %3, ptr %43, i64 %44
  %.sroa.0.0.copyload.i = load i64, ptr %45, align 8, !tbaa.struct !34
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5: ; preds = %40, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6
  %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0 = phi i64 [ %.sroa.067.0.copyload, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit6 ], [ %.sroa.0.0.copyload.i, %40 ]
  %46 = icmp eq i64 %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0, -844429225099137
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #22
  br i1 %46, label %._crit_edge, label %._crit_edge2

._crit_edge:                                      ; preds = %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5, %3, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5.thread
  %47 = call i64 @_Z20GetMetatableForValue6TValue(i64 %1)
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %._crit_edge2, label %49

49:                                               ; preds = %._crit_edge
  %50 = inttoptr i64 %47 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #22
  %51 = sext i32 %2 to i64
  %52 = getelementptr inbounds %struct.UserHeapPointer.3, ptr addrspace(256) inttoptr (i64 264 to ptr addrspace(256)), i64 %51
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #22
  br label %53

53:                                               ; preds = %55, %49
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0 = phi i64 [ 0, %49 ], [ %59, %55 ]
  %54 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0, 8
  br i1 %54, label %55, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70

55:                                               ; preds = %53
  %56 = getelementptr inbounds i8, ptr addrspace(256) %52, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0
  %57 = load i8, ptr addrspace(256) %56, align 1, !tbaa !13
  %58 = getelementptr inbounds [8 x i8], ptr %4, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0
  store i8 %57, ptr %58, align 1, !tbaa !13
  %59 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i68.reg2mem142.0.reg2mem239.0, 1
  br label %53, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70: ; preds = %53
  %.sroa.08.0.copyload.i69 = load i64, ptr %4, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #22
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef nonnull %50, i64 %.sroa.08.0.copyload.i69, ptr noundef nonnull align 4 dereferenceable(8) %9)
  br label %60

60:                                               ; preds = %62, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit70 ], [ %63, %62 ]
  %61 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0, 8
  br i1 %61, label %62, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73

62:                                               ; preds = %60
  %63 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i71.reg2mem140.0.reg2mem237.0, 1
  br label %60, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73: ; preds = %60
  %.sroa.0.0.copyload = load i64, ptr %9, align 8, !tbaa.struct !38
  %.sroa.029.0.extract.trunc = trunc i64 %.sroa.0.0.copyload to i8
  %64 = add i8 %.sroa.029.0.extract.trunc, -1
  %65 = icmp ult i8 %64, 2
  br i1 %65, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit, label %66

66:                                               ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73
  %67 = icmp eq i8 %.sroa.029.0.extract.trunc, 3
  br i1 %67, label %68, label %78

68:                                               ; preds = %66
  %69 = ashr i64 %.sroa.0.0.copyload, 32
  %70 = getelementptr inbounds %12, ptr addrspace(256) %50, i64 0, i32 6, i64 %69
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #22
  br label %71

71:                                               ; preds = %73, %68
  %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0 = phi i64 [ 0, %68 ], [ %77, %73 ]
  %72 = icmp ult i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0, 8
  br i1 %72, label %73, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit

73:                                               ; preds = %71
  %74 = getelementptr inbounds i8, ptr addrspace(256) %70, i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0
  %75 = load i8, ptr addrspace(256) %74, align 1, !tbaa !13
  %76 = getelementptr inbounds [8 x i8], ptr %7, i64 0, i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0
  store i8 %75, ptr %76, align 1, !tbaa !13
  %77 = add nuw nsw i64 %.068.reg2mem115.0.reg2mem184.0.reg2mem44.0.reg2mem138.0.reg2mem235.0, 1
  br label %71, !llvm.loop !43

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit:      ; preds = %71
  %.sroa.060.0.copyload = load i64, ptr %7, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #22
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

78:                                               ; preds = %66
  %79 = icmp eq i8 %.sroa.029.0.extract.trunc, 4
  call void @llvm.assume(i1 %79)
  %80 = getelementptr inbounds %12, ptr addrspace(256) %50, i64 0, i32 5
  %81 = load ptr, ptr addrspace(256) %80, align 8, !tbaa !30
  %82 = ashr i64 %.sroa.0.0.copyload, 32
  %83 = getelementptr inbounds %3, ptr %81, i64 %82
  %.sroa.0.0.copyload.i74 = load i64, ptr %83, align 8, !tbaa.struct !34
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73, %78, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit
  %.sroa.036.0.reg2mem113.0.reg2mem182.0.reg2mem42.0.reg2mem136.0.reg2mem233.0 = phi i64 [ %.sroa.060.0.copyload, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit ], [ %.sroa.0.0.copyload.i74, %78 ], [ -844429225099137, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit73 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #22
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit
  %.sroa.0.3.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %.sroa.036.0.reg2mem113.0.reg2mem182.0.reg2mem42.0.reg2mem136.0.reg2mem233.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit ], [ %.sroa.049.0.reg2mem121.0.reg2mem188.0.reg2mem46.0.reg2mem144.0.reg2mem241.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit5 ], [ -844429225099137, %._crit_edge ]
  ret i64 %.sroa.0.3.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: mustprogress noreturn nounwind uwtable
define internal void @__deegen_bytecode_Add_0_retcont_0_impl(i64 %0, i64 %1) #14 {
  %3 = tail call i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef 0) #22
  tail call void @DeegenImpl_ReturnValue(i64 %3) #19
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dso_local noundef ptr addrspace(256) @_Z25GetCallTargetViaMetatable6TValue(i64 %0) local_unnamed_addr #9 comdat {
  %2 = alloca %union.U.18, align 8
  %3 = alloca %union.U.19, align 8
  %4 = alloca %4, align 8
  %5 = alloca %union.U.13, align 8
  %6 = alloca %union.U, align 4
  %7 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI11tHeapEntityEb6TValue(i64 %0) #21
  br i1 %7, label %8, label %72, !prof !12

8:                                                ; preds = %1
  %9 = inttoptr i64 %0 to ptr addrspace(256)
  %10 = getelementptr inbounds %0, ptr addrspace(256) %9, i64 0, i32 1
  %11 = load i8, ptr addrspace(256) %10, align 4, !tbaa !3
  switch i8 %11, label %71 [
    i8 4, label %12
    i8 0, label %63
    i8 3, label %67
  ], !prof !62

12:                                               ; preds = %8
  %13 = tail call noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI6tTableEDa6TValue(i64 %0) #21
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #22
  br label %14

14:                                               ; preds = %16, %12
  %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem93.0.reg2mem207.0 = phi i64 [ 0, %12 ], [ %20, %16 ]
  %15 = icmp ult i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem93.0.reg2mem207.0, 4
  br i1 %15, label %16, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i

16:                                               ; preds = %14
  %17 = getelementptr inbounds i8, ptr addrspace(256) %13, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem93.0.reg2mem207.0
  %18 = load i8, ptr addrspace(256) %17, align 1, !tbaa !13
  %19 = getelementptr inbounds [4 x i8], ptr %6, i64 0, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem93.0.reg2mem207.0
  store i8 %18, ptr %19, align 1, !tbaa !13
  %20 = add nuw nsw i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem93.0.reg2mem207.0, 1
  br label %14, !llvm.loop !14

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %14
  %.sroa.019.0.copyload.i = load i32, ptr %6, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #22
  %21 = zext i32 %.sroa.019.0.copyload.i to i64
  %22 = inttoptr i64 %21 to ptr addrspace(256)
  %23 = load i8, ptr addrspace(256) %22, align 1, !tbaa !18
  switch i8 %23, label %62 [
    i8 9, label %24
    i8 11, label %53
  ], !prof !20

24:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %25 = getelementptr inbounds %5, ptr addrspace(256) %22, i64 0, i32 12
  %26 = load i32, ptr addrspace(256) %25, align 4, !tbaa !21
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %_Z34GetCallMetamethodFromMetatableImpl15UserHeapPointerIvE.exit, label %28

28:                                               ; preds = %24
  %29 = icmp slt i32 %26, 0
  br i1 %29, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread6, label %32

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread6: ; preds = %28
  %30 = sext i32 %26 to i64
  %31 = shl nsw i64 %30, 3
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge

32:                                               ; preds = %28
  %33 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %34 = ptrtoint ptr %33 to i64
  %35 = ptrtoint ptr addrspace(256) %13 to i64
  %36 = add i64 %34, %35
  %37 = inttoptr i64 %36 to ptr
  %38 = add nsw i32 %26, -1
  %39 = getelementptr inbounds %5, ptr addrspace(256) %22, i64 0, i32 8
  %40 = load i8, ptr addrspace(256) %39, align 1, !tbaa !29
  %41 = zext i8 %40 to i32
  %42 = icmp ult i32 %38, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %32
  %44 = zext i32 %38 to i64
  %45 = getelementptr inbounds %12, ptr %37, i64 0, i32 6, i64 %44
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

46:                                               ; preds = %32
  %47 = sub nsw i32 %41, %26
  %48 = getelementptr inbounds %12, ptr %37, i64 0, i32 5
  %49 = load ptr, ptr %48, align 8, !tbaa !30
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds %3, ptr %49, i64 %50
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i: ; preds = %46, %43
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0 = phi ptr [ %45, %43 ], [ %51, %46 ]
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i = load i64, ptr %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0, align 8
  %52 = icmp eq i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, -844429225099137
  br i1 %52, label %_Z34GetCallMetamethodFromMetatableImpl15UserHeapPointerIvE.exit, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

53:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %54 = getelementptr inbounds %13, ptr addrspace(256) %22, i64 0, i32 7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #22
  br label %55

55:                                               ; preds = %57, %53
  %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem91.0.reg2mem205.0 = phi i64 [ 0, %53 ], [ %61, %57 ]
  %56 = icmp ult i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem91.0.reg2mem205.0, 8
  br i1 %56, label %57, label %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i

57:                                               ; preds = %55
  %58 = getelementptr inbounds i8, ptr addrspace(256) %54, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem91.0.reg2mem205.0
  %59 = load i8, ptr addrspace(256) %58, align 1, !tbaa !13
  %60 = getelementptr inbounds [8 x i8], ptr %5, i64 0, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem91.0.reg2mem205.0
  store i8 %59, ptr %60, align 1, !tbaa !13
  %61 = add nuw nsw i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem91.0.reg2mem205.0, 1
  br label %55, !llvm.loop !33

_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %55
  %.sroa.026.0.copyload.i = load i64, ptr %5, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #22
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

62:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2359, ptr noundef nonnull @__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_) #20
  unreachable

63:                                               ; preds = %8
  %64 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %65 = inttoptr i64 %64 to ptr
  %66 = getelementptr inbounds %class.VM, ptr %65, i64 0, i32 34
  %.sroa.04.0.copyload = load i64, ptr %66, align 16, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

67:                                               ; preds = %8
  %68 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %69 = inttoptr i64 %68 to ptr
  %70 = getelementptr inbounds %class.VM, ptr %69, i64 0, i32 36
  %.sroa.03.0.copyload = load i64, ptr %70, align 32, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

71:                                               ; preds = %8
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2784, ptr noundef nonnull @__PRETTY_FUNCTION__._Z25GetCallTargetViaMetatable6TValue) #20
  unreachable

72:                                               ; preds = %1
  %73 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tNilEb6TValue(i64 %0) #21
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %76 = inttoptr i64 %75 to ptr
  %77 = getelementptr inbounds %class.VM, ptr %76, i64 0, i32 31
  %.sroa.02.0.copyload = load i64, ptr %77, align 8, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

78:                                               ; preds = %72
  %79 = tail call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI4tMIVEb6TValue(i64 %0) #21
  %80 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %81 = inttoptr i64 %80 to ptr
  br i1 %79, label %82, label %84

82:                                               ; preds = %78
  %83 = getelementptr inbounds %class.VM, ptr %81, i64 0, i32 32
  %.sroa.01.0.copyload = load i64, ptr %83, align 64, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

84:                                               ; preds = %78
  %85 = getelementptr inbounds %class.VM, ptr %81, i64 0, i32 33
  %.sroa.0.0.copyload = load i64, ptr %85, align 8, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit: ; preds = %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i, %84, %82, %74, %67, %63
  %.sink.reg2mem.0.reg2mem89.0.reg2mem203.0 = phi i64 [ %.sroa.03.0.copyload, %67 ], [ %.sroa.04.0.copyload, %63 ], [ %.sroa.026.0.copyload.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i ], [ %.sroa.02.0.copyload, %74 ], [ %.sroa.01.0.copyload, %82 ], [ %.sroa.0.0.copyload, %84 ], [ %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i ]
  %86 = icmp eq i64 %.sink.reg2mem.0.reg2mem89.0.reg2mem203.0, 0
  br i1 %86, label %_Z34GetCallMetamethodFromMetatableImpl15UserHeapPointerIvE.exit, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge: ; preds = %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread6
  %.sink.reg2mem.08.reg2mem.0.reg2mem.0 = phi i64 [ %31, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit.thread6 ], [ %.sink.reg2mem.0.reg2mem89.0.reg2mem203.0, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit ]
  %87 = inttoptr i64 %.sink.reg2mem.08.reg2mem.0.reg2mem.0 to ptr addrspace(256)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #22
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #22
  br label %88

88:                                               ; preds = %90, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.reg2mem87.0.reg2mem201.0 = phi i64 [ 0, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit._crit_edge ], [ %94, %90 ]
  %89 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.reg2mem87.0.reg2mem201.0, 8
  br i1 %89, label %90, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit.i

90:                                               ; preds = %88
  %91 = getelementptr inbounds i8, ptr addrspace(256) inttoptr (i64 264 to ptr addrspace(256)), i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.reg2mem87.0.reg2mem201.0
  %92 = load i8, ptr addrspace(256) %91, align 1, !tbaa !13
  %93 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.reg2mem87.0.reg2mem201.0
  store i8 %92, ptr %93, align 1, !tbaa !13
  %94 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.reg2mem87.0.reg2mem201.0, 1
  br label %88, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit.i: ; preds = %88
  %.sroa.08.0.copyload.i.i = load i64, ptr %2, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #22
  call void @_ZN11TableObject14PrepareGetByIdI10HeapStringEEvPU5AS256S_15UserHeapPointerIT_ER13GetByIdICInfo(ptr addrspace(256) noundef nonnull %87, i64 %.sroa.08.0.copyload.i.i, ptr noundef nonnull align 4 dereferenceable(8) %4)
  br label %95

95:                                               ; preds = %97, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit.i
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i35.i.reg2mem85.0.reg2mem199.0 = phi i64 [ 0, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit.i ], [ %98, %97 ]
  %96 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i35.i.reg2mem85.0.reg2mem199.0, 8
  br i1 %96, label %97, label %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit37.i

97:                                               ; preds = %95
  %98 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i35.i.reg2mem85.0.reg2mem199.0, 1
  br label %95, !llvm.loop !37

_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit37.i: ; preds = %95
  %.sroa.0.0.copyload.i = load i64, ptr %4, align 8, !tbaa.struct !38
  %.sroa.07.0.extract.trunc.i = trunc i64 %.sroa.0.0.copyload.i to i8
  %99 = add i8 %.sroa.07.0.extract.trunc.i, -1
  %100 = icmp ult i8 %99, 2
  br i1 %100, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i, label %101

101:                                              ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit37.i
  %102 = icmp eq i8 %.sroa.07.0.extract.trunc.i, 3
  br i1 %102, label %103, label %113

103:                                              ; preds = %101
  %104 = ashr i64 %.sroa.0.0.copyload.i, 32
  %105 = getelementptr inbounds %12, ptr addrspace(256) %87, i64 0, i32 6, i64 %104
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #22
  br label %106

106:                                              ; preds = %108, %103
  %.0.reg2mem53.0.reg2mem87.0.reg2mem25.0.i.reg2mem83.0.reg2mem197.0 = phi i64 [ 0, %103 ], [ %112, %108 ]
  %107 = icmp ult i64 %.0.reg2mem53.0.reg2mem87.0.reg2mem25.0.i.reg2mem83.0.reg2mem197.0, 8
  br i1 %107, label %108, label %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit.i

108:                                              ; preds = %106
  %109 = getelementptr inbounds i8, ptr addrspace(256) %105, i64 %.0.reg2mem53.0.reg2mem87.0.reg2mem25.0.i.reg2mem83.0.reg2mem197.0
  %110 = load i8, ptr addrspace(256) %109, align 1, !tbaa !13
  %111 = getelementptr inbounds [8 x i8], ptr %3, i64 0, i64 %.0.reg2mem53.0.reg2mem87.0.reg2mem25.0.i.reg2mem83.0.reg2mem197.0
  store i8 %110, ptr %111, align 1, !tbaa !13
  %112 = add nuw nsw i64 %.0.reg2mem53.0.reg2mem87.0.reg2mem25.0.i.reg2mem83.0.reg2mem197.0, 1
  br label %106, !llvm.loop !43

_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit.i:    ; preds = %106
  %.sroa.026.0.copyload.i4 = load i64, ptr %3, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #22
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i

113:                                              ; preds = %101
  %114 = icmp eq i8 %.sroa.07.0.extract.trunc.i, 4
  call void @llvm.assume(i1 %114)
  %115 = getelementptr inbounds %12, ptr addrspace(256) %87, i64 0, i32 5
  %116 = load ptr, ptr addrspace(256) %115, align 8, !tbaa !30
  %117 = ashr i64 %.sroa.0.0.copyload.i, 32
  %118 = getelementptr inbounds %3, ptr %116, i64 %117
  %.sroa.0.0.copyload.i.i = load i64, ptr %118, align 8, !tbaa.struct !34
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i: ; preds = %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit37.i, %113, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit.i
  %.sroa.014.0.reg2mem51.0.reg2mem85.0.reg2mem23.0.i.reg2mem81.0.reg2mem195.0 = phi i64 [ %.sroa.026.0.copyload.i4, %_Z13UnalignedLoadI6TValueET_PU5AS256Kv.exit.i ], [ %.sroa.0.0.copyload.i.i, %113 ], [ -844429225099137, %_Z32VM_GetStringNameForMetatableKind17LuaMetamethodKind.exit37.i ]
  %119 = call noundef zeroext i1 @_Z19DeegenImpl_TValueIsI9tFunctionEb6TValue(i64 %.sroa.014.0.reg2mem51.0.reg2mem85.0.reg2mem23.0.i.reg2mem81.0.reg2mem195.0) #21
  br i1 %119, label %120, label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit._crit_edge.i, !prof !12

120:                                              ; preds = %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i
  %121 = call noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI9tFunctionEDa6TValue(i64 %.sroa.014.0.reg2mem51.0.reg2mem85.0.reg2mem23.0.i.reg2mem81.0.reg2mem195.0) #21
  br label %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit._crit_edge.i

_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit._crit_edge.i: ; preds = %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i, %120
  %.027.reg2mem49.0.reg2mem83.0.reg2mem21.0.i.reg2mem79.0.reg2mem193.0 = phi ptr addrspace(256) [ %121, %120 ], [ null, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #22
  br label %_Z34GetCallMetamethodFromMetatableImpl15UserHeapPointerIvE.exit

_Z34GetCallMetamethodFromMetatableImpl15UserHeapPointerIvE.exit: ; preds = %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %24, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit._crit_edge.i
  %.1.reg2mem.0.reg2mem.0.reg2mem.0.i.reg2mem.0.reg2mem.0 = phi ptr addrspace(256) [ %.027.reg2mem49.0.reg2mem83.0.reg2mem21.0.i.reg2mem79.0.reg2mem193.0, %_ZN11TableObject7GetByIdIPU5AS256S_vEE6TValueT_15UserHeapPointerIvE13GetByIdICInfo.exit._crit_edge.i ], [ null, %24 ], [ null, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i ], [ null, %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit ]
  ret ptr addrspace(256) %.1.reg2mem.0.reg2mem.0.reg2mem.0.i.reg2mem.0.reg2mem.0
}

declare dso_local i64 @_Z31MakeErrorMessageForUnableToCall6TValue(i64) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef double @_Z19DeegenImpl_TValueAsI7tDoubleEDa6TValue(i64 %0) local_unnamed_addr #4 comdat {
  %2 = bitcast i64 %0 to double
  ret double %2
}

; Function Attrs: noreturn
declare dso_local void @DeegenImpl_ReturnValue(i64) local_unnamed_addr #15

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI6tTableEDa6TValue(i64 %0) local_unnamed_addr #5 comdat {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  ret ptr addrspace(256) %2
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN11TableObject40PrepareGetByIdImplForCacheableDictionaryI10HeapStringEEv17SystemHeapPointerIvE15UserHeapPointerIT_ER13GetByIdICInfo(i32 %0, i64 %1, ptr noundef nonnull align 4 dereferenceable(8) %2) local_unnamed_addr #13 comdat align 2 {
  %4 = zext i32 %0 to i64
  %5 = inttoptr i64 %4 to ptr addrspace(256)
  %6 = getelementptr inbounds %13, ptr addrspace(256) %5, i64 0, i32 7
  %7 = load i64, ptr addrspace(256) %6, align 8, !tbaa !51
  %8 = icmp ne i64 %7, 0
  %9 = getelementptr inbounds %4, ptr %2, i64 0, i32 1
  %10 = zext i1 %8 to i8
  store i8 %10, ptr %9, align 1, !tbaa !45
  %11 = getelementptr inbounds %13, ptr addrspace(256) %5, i64 0, i32 2
  %12 = load i8, ptr addrspace(256) %11, align 1, !tbaa !54
  %13 = zext i8 %12 to i32
  %14 = inttoptr i64 %1 to ptr addrspace(256)
  %15 = getelementptr inbounds %class.HeapString, ptr addrspace(256) %14, i64 0, i32 5
  %16 = load i32, ptr addrspace(256) %15, align 8, !tbaa !47
  %17 = getelementptr inbounds %13, ptr addrspace(256) %5, i64 0, i32 4
  %18 = load i32, ptr addrspace(256) %17, align 8, !tbaa !55
  %19 = zext i32 %18 to i64
  %20 = and i32 %18, %16
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %1, 3
  %23 = trunc i64 %22 to i32
  %.phi.trans.insert.i = getelementptr inbounds %13, ptr addrspace(256) %5, i64 0, i32 6
  %.pre.i = load ptr, ptr addrspace(256) %.phi.trans.insert.i, align 8, !tbaa !56
  br label %._crit_edge20.i

._crit_edge20.i:                                  ; preds = %._crit_edge.i, %3
  %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0 = phi i64 [ %21, %3 ], [ %29, %._crit_edge.i ]
  %24 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0
  %.sroa.016.0.copyload.i = load i32, ptr %24, align 4, !tbaa.struct !16
  %25 = icmp eq i32 %.sroa.016.0.copyload.i, 0
  br i1 %25, label %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit, label %26

26:                                               ; preds = %._crit_edge20.i
  %27 = icmp eq i32 %.sroa.016.0.copyload.i, %23
  br i1 %27, label %30, label %._crit_edge.i

._crit_edge.i:                                    ; preds = %26
  %28 = add nsw i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0, 1
  %29 = and i64 %28, %19
  br label %._crit_edge20.i, !llvm.loop !57

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.CacheableDictionary::HashTableEntry", ptr %.pre.i, i64 %.017.reg2mem39.0.reg2mem61.0.reg2mem13.0.i.reg2mem29.0.reg2mem55.0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !58
  %33 = icmp ult i32 %32, %13
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  store i8 3, ptr %2, align 4, !tbaa !49
  %35 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %32, ptr %35, align 4, !tbaa !50
  br label %40

36:                                               ; preds = %30
  store i8 4, ptr %2, align 4, !tbaa !49
  %37 = xor i32 %32, -1
  %38 = add i32 %37, %13
  %39 = getelementptr inbounds %4, ptr %2, i64 0, i32 2
  store i32 %38, ptr %39, align 4, !tbaa !50
  br label %40

_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit: ; preds = %._crit_edge20.i
  store i8 2, ptr %2, align 4, !tbaa !49
  br label %40

40:                                               ; preds = %_ZN19CacheableDictionary32GetSlotOrdinalFromStringPropertyIPU5AS256S_vEEbT_15UserHeapPointerI10HeapStringERj.exit, %36, %34
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN9Structure37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_15UserHeapPointerIvEjRj(ptr addrspace(256) noundef %0, i64 %1, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3) local_unnamed_addr #13 comdat align 2 {
  %5 = alloca %union.U.16, align 4
  %6 = alloca %union.U.15, align 4
  %7 = alloca %union.U.15, align 4
  %8 = alloca %union.U.17, align 4
  %9 = lshr i64 %1, 3
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 7
  %12 = load i8, ptr addrspace(256) %11, align 4, !tbaa !73
  %13 = zext i8 %12 to i64
  %14 = xor i64 %13, -1
  %15 = lshr i32 %2, 8
  %16 = and i32 %15, 255
  %17 = zext i32 %16 to i64
  br label %._crit_edge1._crit_edge.i

._crit_edge1._crit_edge.i:                        ; preds = %._crit_edge1.i, %4
  %.pn.reg2mem.0.i.reg2mem.0.reg2mem.0 = phi i64 [ %17, %4 ], [ %63, %._crit_edge1.i ]
  %.025.reg2mem62.0.reg2mem101.0.i = or i64 %.pn.reg2mem.0.i.reg2mem.0.reg2mem.0, %14
  %18 = getelementptr inbounds %"struct.Structure::InlineHashTableEntry", ptr addrspace(256) %0, i64 %.025.reg2mem62.0.reg2mem101.0.i, i32 1
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !74
  %20 = icmp eq i8 %19, 127
  br i1 %20, label %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread, label %21

21:                                               ; preds = %._crit_edge1._crit_edge.i
  %22 = getelementptr inbounds %"struct.Structure::InlineHashTableEntry", ptr addrspace(256) %0, i64 %.025.reg2mem62.0.reg2mem101.0.i
  %23 = load i8, ptr addrspace(256) %22, align 1, !tbaa !76
  %24 = trunc i32 %2 to i8
  %25 = icmp eq i8 %23, %24
  br i1 %25, label %26, label %._crit_edge1.i

26:                                               ; preds = %21
  %27 = icmp sgt i8 %19, -1
  br i1 %27, label %28, label %38

28:                                               ; preds = %26
  %29 = zext i8 %19 to i64
  %30 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 14, i64 %29
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #22
  br label %31

31:                                               ; preds = %33, %28
  %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0 = phi i64 [ 0, %28 ], [ %37, %33 ]
  %32 = icmp ult i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0, 4
  br i1 %32, label %33, label %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i

33:                                               ; preds = %31
  %34 = getelementptr inbounds i8, ptr addrspace(256) %30, i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0
  %35 = load i8, ptr addrspace(256) %34, align 1, !tbaa !13
  %36 = getelementptr inbounds [4 x i8], ptr %7, i64 0, i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0
  store i8 %35, ptr %36, align 1, !tbaa !13
  %37 = add nuw nsw i64 %.023.reg2mem38.0.reg2mem60.0.reg2mem15.0.i.i.reg2mem70.0.reg2mem144.0, 1
  br label %31, !llvm.loop !77

_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i: ; preds = %31
  %.sroa.015.0.copyload.i.i = load i32, ptr %7, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #22
  br label %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i

38:                                               ; preds = %26
  %39 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 14
  %40 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 2
  %41 = load i8, ptr addrspace(256) %40, align 1, !tbaa !78
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds %11, ptr addrspace(256) %39, i64 %42
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #22
  br label %44

44:                                               ; preds = %46, %38
  %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0 = phi i64 [ 0, %38 ], [ %50, %46 ]
  %45 = icmp ult i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0, 4
  br i1 %45, label %46, label %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i

46:                                               ; preds = %44
  %47 = getelementptr inbounds i8, ptr addrspace(256) %43, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0
  %48 = load i8, ptr addrspace(256) %47, align 1, !tbaa !13
  %49 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0
  store i8 %48, ptr %49, align 1, !tbaa !13
  %50 = add nuw nsw i64 %.0.reg2mem14.0.reg2mem24.0.reg2mem6.0.i.i.i.reg2mem68.0.reg2mem142.0, 1
  br label %44, !llvm.loop !79

_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i: ; preds = %44
  %.sroa.08.0.copyload.i.i.i = load i32, ptr %5, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #22
  %51 = zext i32 %.sroa.08.0.copyload.i.i.i to i64
  %52 = inttoptr i64 %51 to ptr addrspace(256)
  %53 = sext i8 %19 to i64
  %54 = getelementptr inbounds %11, ptr addrspace(256) %52, i64 %53
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #22
  br label %55

55:                                               ; preds = %57, %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i
  %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0 = phi i64 [ 0, %_ZN9Structure24GetFinalFullBlockPointerIPU5AS256S_vEE17SystemHeapPointerI18GeneralHeapPointerIvEET_.exit.i.i ], [ %61, %57 ]
  %56 = icmp ult i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0, 4
  br i1 %56, label %57, label %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i

57:                                               ; preds = %55
  %58 = getelementptr inbounds i8, ptr addrspace(256) %54, i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0
  %59 = load i8, ptr addrspace(256) %58, align 1, !tbaa !13
  %60 = getelementptr inbounds [4 x i8], ptr %6, i64 0, i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0
  store i8 %59, ptr %60, align 1, !tbaa !13
  %61 = add nuw nsw i64 %.0.reg2mem36.0.reg2mem58.0.reg2mem13.0.i.i.reg2mem66.0.reg2mem140.0, 1
  br label %55, !llvm.loop !77

_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i: ; preds = %55
  %.sroa.022.0.copyload.i.i = load i32, ptr %6, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #22
  br label %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i

_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i: ; preds = %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i
  %.sroa.0.0.reg2mem.0.reg2mem.0.reg2mem.0.i.i.reg2mem.0.reg2mem.0 = phi i32 [ %.sroa.015.0.copyload.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit.i.i ], [ %.sroa.022.0.copyload.i.i, %_Z13UnalignedLoadI18GeneralHeapPointerIvEET_PU5AS256Kv.exit1.i.i ]
  %62 = icmp eq i32 %.sroa.0.0.reg2mem.0.reg2mem.0.reg2mem.0.i.i.reg2mem.0.reg2mem.0, %10
  br i1 %62, label %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit, label %._crit_edge1.i

._crit_edge1.i:                                   ; preds = %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i, %21
  %63 = add nsw i64 %.025.reg2mem62.0.reg2mem101.0.i, -1
  br label %._crit_edge1._crit_edge.i, !llvm.loop !80

_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit: ; preds = %_ZN9Structure41GetPropertyNameFromInlineHashTableOrdinalIPU5AS256S_vEE18GeneralHeapPointerIvET_a.exit.i
  %64 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 1
  %65 = load i8, ptr addrspace(256) %64, align 2, !tbaa !81
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 2
  %68 = load i8, ptr addrspace(256) %67, align 1, !tbaa !78
  %69 = zext i8 %68 to i32
  %70 = sext i8 %19 to i32
  %71 = add nsw i32 %66, %70
  %72 = sub nsw i32 %71, %69
  store i32 %72, ptr %3, align 4, !tbaa !17
  br label %._crit_edge

_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread: ; preds = %._crit_edge1._crit_edge.i
  %73 = getelementptr inbounds %5, ptr addrspace(256) %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #22
  br label %74

74:                                               ; preds = %76, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread
  %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0 = phi i64 [ 0, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit.thread ], [ %80, %76 ]
  %75 = icmp ult i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0, 4
  br i1 %75, label %76, label %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit

76:                                               ; preds = %74
  %77 = getelementptr inbounds i8, ptr addrspace(256) %73, i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0
  %78 = load i8, ptr addrspace(256) %77, align 1, !tbaa !13
  %79 = getelementptr inbounds [4 x i8], ptr %8, i64 0, i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0
  store i8 %78, ptr %79, align 1, !tbaa !13
  %80 = add nuw nsw i64 %.0.reg2mem26.0.reg2mem40.0.reg2mem10.0.reg2mem64.0.reg2mem138.0, 1
  br label %74, !llvm.loop !82

_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit: ; preds = %74
  %.sroa.015.0.copyload = load i32, ptr %8, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #22
  %81 = icmp eq i32 %.sroa.015.0.copyload, 0
  br i1 %81, label %._crit_edge, label %82, !prof !12

82:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit
  %83 = zext i32 %.sroa.015.0.copyload to i64
  %84 = inttoptr i64 %83 to ptr addrspace(256)
  %85 = tail call noundef zeroext i1 @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj(ptr addrspace(256) noundef nonnull %84, i32 %10, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3)
  br label %._crit_edge

._crit_edge:                                      ; preds = %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit, %82
  %.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i1 [ %85, %82 ], [ true, %_ZN9Structure20QueryInlineHashTableIPU5AS256S_vEEbT_18GeneralHeapPointerIvEtRj.exit ], [ false, %_Z13UnalignedLoadI17SystemHeapPointerI24StructureAnchorHashTableEET_PU5AS256Kv.exit ]
  ret i1 %.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local noundef zeroext i1 @_ZN24StructureAnchorHashTable37GetSlotOrdinalFromPropertyNameAndHashIPU5AS256S_vEEbT_18GeneralHeapPointerIvEjRj(ptr addrspace(256) noundef %0, i32 %1, i32 noundef %2, ptr noundef nonnull align 4 dereferenceable(4) %3) local_unnamed_addr #13 comdat align 2 {
  %5 = alloca %union.U.16, align 4
  %6 = alloca %union.U.15, align 4
  %7 = getelementptr inbounds %class.StructureAnchorHashTable, ptr addrspace(256) %0, i64 0, i32 3
  %8 = load i32, ptr addrspace(256) %7, align 4, !tbaa !83
  %9 = sext i32 %8 to i64
  %10 = lshr i32 %2, 8
  %11 = zext i32 %10 to i64
  br label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge1, %4
  %.pn.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %11, %4 ], [ %45, %._crit_edge1 ]
  %.024.reg2mem64.0.reg2mem105.0 = or i64 %.pn.reg2mem.0.reg2mem.0.reg2mem.0, %9
  %12 = getelementptr inbounds %"struct.StructureAnchorHashTable::HashTableEntry", ptr addrspace(256) %0, i64 %.024.reg2mem64.0.reg2mem105.0
  %13 = load i8, ptr addrspace(256) %12, align 1, !tbaa !85
  %14 = zext i8 %13 to i32
  %15 = icmp eq i8 %13, -1
  br i1 %15, label %._crit_edge1._crit_edge._crit_edge, label %16

16:                                               ; preds = %._crit_edge1._crit_edge
  %17 = getelementptr inbounds %"struct.StructureAnchorHashTable::HashTableEntry", ptr addrspace(256) %0, i64 %.024.reg2mem64.0.reg2mem105.0, i32 1
  %18 = load i8, ptr addrspace(256) %17, align 1, !tbaa !87
  %19 = trunc i32 %2 to i8
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %._crit_edge1

21:                                               ; preds = %16
  %22 = lshr i8 %13, 4
  %23 = and i8 %13, 15
  %24 = zext i8 %22 to i64
  %25 = getelementptr inbounds %class.StructureAnchorHashTable, ptr addrspace(256) %0, i64 0, i32 4, i64 %24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #22
  br label %26

26:                                               ; preds = %28, %21
  %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0 = phi i64 [ 0, %21 ], [ %32, %28 ]
  %27 = icmp ult i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0, 4
  br i1 %27, label %28, label %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i

28:                                               ; preds = %26
  %29 = getelementptr inbounds i8, ptr addrspace(256) %25, i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0
  %30 = load i8, ptr addrspace(256) %29, align 1, !tbaa !13
  %31 = getelementptr inbounds [4 x i8], ptr %5, i64 0, i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0
  store i8 %30, ptr %31, align 1, !tbaa !13
  %32 = add nuw nsw i64 %.0.reg2mem39.0.reg2mem63.0.reg2mem17.0.i.reg2mem58.0.reg2mem105.0, 1
  br label %26, !llvm.loop !79

_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i: ; preds = %26
  %.sroa.021.0.copyload.i = load i32, ptr %5, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #22
  %33 = zext i32 %.sroa.021.0.copyload.i to i64
  %34 = inttoptr i64 %33 to ptr addrspace(256)
  %35 = zext i8 %23 to i64
  %36 = getelementptr inbounds %11, ptr addrspace(256) %34, i64 %35
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #22
  br label %37

37:                                               ; preds = %39, %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i
  %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0 = phi i64 [ 0, %_Z13UnalignedLoadI17SystemHeapPointerI18GeneralHeapPointerIvEEET_PU5AS256Kv.exit.i ], [ %43, %39 ]
  %38 = icmp ult i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0, 4
  br i1 %38, label %39, label %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit

39:                                               ; preds = %37
  %40 = getelementptr inbounds i8, ptr addrspace(256) %36, i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0
  %41 = load i8, ptr addrspace(256) %40, align 1, !tbaa !13
  %42 = getelementptr inbounds [4 x i8], ptr %6, i64 0, i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0
  store i8 %41, ptr %42, align 1, !tbaa !13
  %43 = add nuw nsw i64 %.022.reg2mem37.0.reg2mem61.0.reg2mem15.0.i.reg2mem56.0.reg2mem103.0, 1
  br label %37, !llvm.loop !77

_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit: ; preds = %37
  %.sroa.012.0.copyload.i = load i32, ptr %6, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #22
  %44 = icmp eq i32 %.sroa.012.0.copyload.i, %1
  br i1 %44, label %._crit_edge27.thread, label %._crit_edge1

._crit_edge27.thread:                             ; preds = %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit
  store i32 %14, ptr %3, align 4, !tbaa !17
  br label %._crit_edge1._crit_edge._crit_edge

._crit_edge1:                                     ; preds = %_ZN24StructureAnchorHashTable21GetPropertyNameAtSlotIPU5AS256S_vEE18GeneralHeapPointerIvET_h.exit, %16
  %45 = add nsw i64 %.024.reg2mem64.0.reg2mem105.0, -1
  br label %._crit_edge1._crit_edge, !llvm.loop !88

._crit_edge1._crit_edge._crit_edge:               ; preds = %._crit_edge1._crit_edge, %._crit_edge27.thread
  %46 = xor i1 %15, true
  ret i1 %46
}

declare dso_local { i32, i64 } @_Z40TryConvertStringToDoubleWithLuaSemanticsPKvm(ptr noundef, i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare dso_local double @pow(double noundef, double noundef) local_unnamed_addr #16

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #17

; Function Attrs: mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #17

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local i64 @_Z20GetMetatableForValue6TValue(i64 %0) local_unnamed_addr #3 comdat {
  %2 = alloca %union.U.13, align 8
  %3 = alloca %union.U, align 4
  %4 = icmp ugt i64 %0, -844429225099137
  br i1 %4, label %5, label %72, !prof !12

5:                                                ; preds = %1
  %6 = inttoptr i64 %0 to ptr addrspace(256)
  %7 = getelementptr inbounds %0, ptr addrspace(256) %6, i64 0, i32 1
  %8 = load i8, ptr addrspace(256) %7, align 4, !tbaa !3
  switch i8 %8, label %71 [
    i8 4, label %9
    i8 0, label %59
    i8 1, label %63
    i8 3, label %67
  ], !prof !89

9:                                                ; preds = %5
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #22
  br label %10

10:                                               ; preds = %12, %9
  %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0 = phi i64 [ 0, %9 ], [ %16, %12 ]
  %11 = icmp ult i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0, 4
  br i1 %11, label %12, label %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i

12:                                               ; preds = %10
  %13 = getelementptr inbounds i8, ptr addrspace(256) %6, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0
  %14 = load i8, ptr addrspace(256) %13, align 1, !tbaa !13
  %15 = getelementptr inbounds [4 x i8], ptr %3, i64 0, i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0
  store i8 %14, ptr %15, align 1, !tbaa !13
  %16 = add nuw nsw i64 %.027.reg2mem47.0.reg2mem73.0.reg2mem19.0.i.reg2mem52.0.reg2mem113.0, 1
  br label %10, !llvm.loop !14

_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %10
  %.sroa.019.0.copyload.i = load i32, ptr %3, align 4, !tbaa.struct !16
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #22
  %17 = zext i32 %.sroa.019.0.copyload.i to i64
  %18 = inttoptr i64 %17 to ptr addrspace(256)
  %19 = load i8, ptr addrspace(256) %18, align 1, !tbaa !18
  switch i8 %19, label %58 [
    i8 9, label %20
    i8 11, label %49
  ], !prof !20

20:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %21 = getelementptr inbounds %5, ptr addrspace(256) %18, i64 0, i32 12
  %22 = load i32, ptr addrspace(256) %21, align 4, !tbaa !21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit, label %24

24:                                               ; preds = %20
  %25 = icmp slt i32 %22, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  %27 = sext i32 %22 to i64
  %28 = shl nsw i64 %27, 3
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

29:                                               ; preds = %24
  %30 = load ptr, ptr addrspace(256) null, align 4294967296, !tbaa !10
  %31 = ptrtoint ptr %30 to i64
  %32 = add i64 %31, %0
  %33 = inttoptr i64 %32 to ptr
  %34 = add nsw i32 %22, -1
  %35 = getelementptr inbounds %5, ptr addrspace(256) %18, i64 0, i32 8
  %36 = load i8, ptr addrspace(256) %35, align 1, !tbaa !29
  %37 = zext i8 %36 to i32
  %38 = icmp ult i32 %34, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %29
  %40 = zext i32 %34 to i64
  %41 = getelementptr inbounds %12, ptr %33, i64 0, i32 6, i64 %40
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

42:                                               ; preds = %29
  %43 = sub nsw i32 %37, %22
  %44 = getelementptr inbounds %12, ptr %33, i64 0, i32 5
  %45 = load ptr, ptr %44, align 8, !tbaa !30
  %46 = sext i32 %43 to i64
  %47 = getelementptr inbounds %3, ptr %45, i64 %46
  br label %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i

_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i: ; preds = %42, %39
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0 = phi ptr [ %41, %39 ], [ %47, %42 ]
  %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i = load i64, ptr %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.in.i.i.reg2mem.0.reg2mem.0, align 8
  %48 = icmp eq i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i, -844429225099137
  %spec.select.i.i = select i1 %48, i64 0, i64 %.sroa.0.0.reg2mem13.0.reg2mem18.0.reg2mem7.0.i.i
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

49:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  %50 = getelementptr inbounds %13, ptr addrspace(256) %18, i64 0, i32 7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #22
  br label %51

51:                                               ; preds = %53, %49
  %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0 = phi i64 [ 0, %49 ], [ %57, %53 ]
  %52 = icmp ult i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0, 8
  br i1 %52, label %53, label %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, ptr addrspace(256) %50, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0
  %55 = load i8, ptr addrspace(256) %54, align 1, !tbaa !13
  %56 = getelementptr inbounds [8 x i8], ptr %2, i64 0, i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0
  store i8 %55, ptr %56, align 1, !tbaa !13
  %57 = add nuw nsw i64 %.0.reg2mem45.0.reg2mem71.0.reg2mem17.0.i.reg2mem50.0.reg2mem111.0, 1
  br label %51, !llvm.loop !33

_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i: ; preds = %51
  %.sroa.026.0.copyload.i = load i64, ptr %2, align 8, !tbaa.struct !34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #22
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

58:                                               ; preds = %_Z13UnalignedLoadI17SystemHeapPointerIvEET_PU5AS256Kv.exit.i
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2359, ptr noundef nonnull @__PRETTY_FUNCTION__._ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_) #20
  unreachable

59:                                               ; preds = %5
  %60 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %61 = inttoptr i64 %60 to ptr
  %62 = getelementptr inbounds %class.VM, ptr %61, i64 0, i32 34
  %.sroa.04.0.copyload = load i64, ptr %62, align 16, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

63:                                               ; preds = %5
  %64 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %65 = inttoptr i64 %64 to ptr
  %66 = getelementptr inbounds %class.VM, ptr %65, i64 0, i32 35
  %.sroa.04.0.copyload5 = load i64, ptr %66, align 8, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

67:                                               ; preds = %5
  %68 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %69 = inttoptr i64 %68 to ptr
  %70 = getelementptr inbounds %class.VM, ptr %69, i64 0, i32 36
  %.sroa.04.0.copyload6 = load i64, ptr %70, align 32, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

71:                                               ; preds = %5
  tail call void @_Z17FireReleaseAssertPKcS0_jS0_(ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.12, i32 noundef 2706, ptr noundef nonnull @__PRETTY_FUNCTION__._Z20GetMetatableForValue6TValue) #20
  unreachable

72:                                               ; preds = %1
  %73 = and i64 %0, -844429225099264
  %74 = icmp eq i64 %73, -844429225099264
  br i1 %74, label %75, label %83

75:                                               ; preds = %72
  %76 = icmp eq i64 %0, -844429225099137
  %77 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %78 = inttoptr i64 %77 to ptr
  br i1 %76, label %79, label %81

79:                                               ; preds = %75
  %80 = getelementptr inbounds %class.VM, ptr %78, i64 0, i32 31
  %.sroa.04.0.copyload7 = load i64, ptr %80, align 8, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

81:                                               ; preds = %75
  %82 = getelementptr inbounds %class.VM, ptr %78, i64 0, i32 32
  %.sroa.04.0.copyload8 = load i64, ptr %82, align 64, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

83:                                               ; preds = %72
  %84 = load i64, ptr addrspace(256) null, align 4294967296, !tbaa !63
  %85 = inttoptr i64 %84 to ptr
  %86 = getelementptr inbounds %class.VM, ptr %85, i64 0, i32 33
  %.sroa.04.0.copyload9 = load i64, ptr %86, align 8, !tbaa.struct !34
  br label %_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit

_ZN11TableObject12GetMetatableIPU5AS256S_vEENS_18GetMetatableResultET_.exit: ; preds = %20, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i, %26, %83, %81, %79, %67, %63, %59
  %.sroa.04.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0 = phi i64 [ %.sroa.04.0.copyload6, %67 ], [ %.sroa.04.0.copyload5, %63 ], [ %.sroa.04.0.copyload, %59 ], [ %.sroa.026.0.copyload.i, %_Z13UnalignedLoadI15UserHeapPointerIvEET_PU5AS256Kv.exit.i ], [ %28, %26 ], [ %spec.select.i.i, %_Z50GetPolyMetatableFromObjectWithStructureHiddenClassP11TableObjectjj.exit.i ], [ %.sroa.04.0.copyload7, %79 ], [ %.sroa.04.0.copyload8, %81 ], [ %.sroa.04.0.copyload9, %83 ], [ 0, %20 ]
  ret i64 %.sroa.04.1.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0.reg2mem.0
}

; Function Attrs: noreturn
declare dso_local void @DeegenImpl_ThrowErrorCString(ptr noundef) local_unnamed_addr #15

; Function Attrs: nounwind readnone willreturn uwtable
define linkonce_odr dso_local noundef ptr addrspace(256) @_Z19DeegenImpl_TValueAsI9tFunctionEDa6TValue(i64 %0) local_unnamed_addr #5 comdat {
  %2 = inttoptr i64 %0 to ptr addrspace(256)
  ret ptr addrspace(256) %2
}

declare dso_local i64 @_Z30DeegenImpl_GetReturnValueAtOrdm(i64 noundef) local_unnamed_addr #0

; Function Attrs: noreturn
declare dso_local void @DeegenImpl_ThrowErrorTValue(i64) local_unnamed_addr #15

; Function Attrs: nounwind uwtable
define internal void @_GLOBAL__sub_I_arithmetic_bytecodes.cpp() #13 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit) #22
  %1 = tail call i32 @__cxa_atexit(ptr nonnull @_ZNSt8ios_base4InitD1Ev, ptr nonnull @_ZStL8__ioinit, ptr nonnull @__dso_handle) #22
  ret void
}

; Function Attrs: inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #18

; Function Attrs: noreturn nounwind
declare void @__DeegenInternal_AstMakeCallIdentificationFunc_0(i1, i1, i1, i64, ptr, i64, i64, i64) local_unnamed_addr #19

; Function Attrs: noreturn nounwind
declare void @__DeegenInternal_AstMakeCallIdentificationFunc_1(i1, i1, i1, i64, ptr, i64, i64, i64, i64) local_unnamed_addr #19

attributes #0 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind }
attributes #3 = { inlinehint nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind readnone willreturn uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #7 = { argmemonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #8 = { inlinehint mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #9 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #10 = { noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #13 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #15 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #16 = { mustprogress nofree nounwind willreturn writeonly "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+bmi,+crc32,+cx8,+fsgsbase,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #17 = { mustprogress nocallback nofree nosync nounwind readnone speculatable willreturn }
attributes #18 = { inaccessiblememonly mustprogress nocallback nofree nosync nounwind willreturn }
attributes #19 = { noreturn nounwind }
attributes #20 = { noreturn }
attributes #21 = { nounwind readnone willreturn }
attributes #22 = { nounwind }
attributes #23 = { cold }

!llvm.linker.options = !{}
!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!"clang version 15.0.3 (https://github.com/llvm/llvm-project.git 4a2c05b05ed07f1f620e94f6524a8b4b2760a0b1)"}
!3 = !{!4, !8, i64 4}
!4 = !{!"_ZTS22UserHeapGcObjectHeader", !5, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !6, i64 7}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!"_ZTS14HeapEntityType", !6, i64 0}
!9 = !{!"_ZTS11GcCellState", !6, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !6, i64 0}
!12 = !{!"branch_weights", i32 2000, i32 1}
!13 = !{!6, !6, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{i64 0, i64 4, !17}
!17 = !{!5, !5, i64 0}
!18 = !{!19, !8, i64 0}
!19 = !{!"_ZTS24SystemHeapGcObjectHeader", !8, i64 0, !9, i64 1}
!20 = !{!"branch_weights", i32 1, i32 4000, i32 1}
!21 = !{!22, !5, i64 20}
!22 = !{!"_ZTS9Structure", !19, i64 0, !6, i64 2, !6, i64 3, !23, i64 4, !24, i64 8, !6, i64 9, !25, i64 10, !6, i64 12, !6, i64 13, !6, i64 14, !26, i64 15, !27, i64 16, !5, i64 20, !28, i64 24, !6, i64 28}
!23 = !{!"_ZTS17SystemHeapPointerI24StructureAnchorHashTableE", !5, i64 0}
!24 = !{!"_ZTS9ArrayType", !6, i64 0}
!25 = !{!"short", !6, i64 0}
!26 = !{!"_ZTSN9Structure14TransitionKindE", !6, i64 0}
!27 = !{!"_ZTS17SystemHeapPointerI9StructureE", !5, i64 0}
!28 = !{!"_ZTS28SystemHeapPointerTaggedUnionIJ9Structure24StructureTransitionTableEE", !5, i64 0}
!29 = !{!22, !6, i64 13}
!30 = !{!31, !11, i64 8}
!31 = !{!"_ZTS11TableObject", !32, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !24, i64 7, !11, i64 8, !6, i64 16}
!32 = !{!"_ZTS17SystemHeapPointerIvE", !5, i64 0}
!33 = distinct !{!33, !15}
!34 = !{i64 0, i64 8, !35}
!35 = !{!36, !36, i64 0}
!36 = !{!"long", !6, i64 0}
!37 = distinct !{!37, !15}
!38 = !{i64 0, i64 1, !39, i64 1, i64 1, !41, i64 4, i64 4, !17}
!39 = !{!40, !40, i64 0}
!40 = !{!"_ZTSN13GetByIdICInfo6ICKindE", !6, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"bool", !6, i64 0}
!43 = distinct !{!43, !15}
!44 = !{!"branch_weights", i32 1, i32 2000}
!45 = !{!46, !42, i64 1}
!46 = !{!"_ZTS13GetByIdICInfo", !40, i64 0, !42, i64 1, !5, i64 4}
!47 = !{!48, !5, i64 8}
!48 = !{!"_ZTS10HeapString", !5, i64 0, !8, i64 4, !9, i64 5, !6, i64 6, !6, i64 7, !5, i64 8, !5, i64 12, !6, i64 16}
!49 = !{!46, !40, i64 0}
!50 = !{!46, !5, i64 4}
!51 = !{!52, !36, i64 24}
!52 = !{!"_ZTS19CacheableDictionary", !19, i64 0, !42, i64 2, !6, i64 3, !5, i64 4, !5, i64 8, !5, i64 12, !11, i64 16, !53, i64 24}
!53 = !{!"_ZTS15UserHeapPointerIvE", !36, i64 0}
!54 = !{!52, !6, i64 3}
!55 = !{!52, !5, i64 8}
!56 = !{!52, !11, i64 16}
!57 = distinct !{!57, !15}
!58 = !{!59, !5, i64 4}
!59 = !{!"_ZTSN19CacheableDictionary14HashTableEntryE", !60, i64 0, !5, i64 4}
!60 = !{!"_ZTS18GeneralHeapPointerIvE", !5, i64 0}
!61 = !{!48, !5, i64 12}
!62 = !{!"branch_weights", i32 1, i32 8000, i32 2, i32 1}
!63 = !{!64, !36, i64 0}
!64 = !{!"_ZTS2VM", !36, i64 0, !65, i64 64, !36, i64 80, !36, i64 88, !5, i64 96, !5, i64 100, !6, i64 104, !66, i64 128, !68, i64 168, !5, i64 176, !65, i64 192, !6, i64 208, !5, i64 212, !5, i64 216, !11, i64 224, !70, i64 232, !6, i64 240, !11, i64 256, !71, i64 264, !72, i64 392, !6, i64 424, !6, i64 472, !11, i64 480, !11, i64 488, !11, i64 496, !53, i64 504, !53, i64 512, !53, i64 520, !53, i64 528, !53, i64 536, !53, i64 544, !11, i64 552, !70, i64 560, !70, i64 568, !32, i64 576}
!65 = !{!"_ZTS13SpdsAllocImplI2VMLb0EE", !11, i64 0, !5, i64 8, !5, i64 12}
!66 = !{!"_ZTSSt5mutex", !67, i64 0}
!67 = !{!"_ZTSSt12__mutex_base", !6, i64 0}
!68 = !{!"_ZTSSt6atomicImE", !69, i64 0}
!69 = !{!"_ZTSSt13__atomic_baseImE", !36, i64 0}
!70 = !{!"_ZTS15UserHeapPointerI10HeapStringE", !36, i64 0}
!71 = !{!"_ZTSSt5arrayI15UserHeapPointerI10HeapStringELm16EE", !6, i64 0}
!72 = !{!"_ZTSSt5arrayI17SystemHeapPointerI9StructureELm7EE", !6, i64 0}
!73 = !{!22, !6, i64 12}
!74 = !{!75, !6, i64 1}
!75 = !{!"_ZTSN9Structure20InlineHashTableEntryE", !6, i64 0, !6, i64 1}
!76 = !{!75, !6, i64 0}
!77 = distinct !{!77, !15}
!78 = !{!22, !6, i64 3}
!79 = distinct !{!79, !15}
!80 = distinct !{!80, !15}
!81 = !{!22, !6, i64 2}
!82 = distinct !{!82, !15}
!83 = !{!84, !5, i64 4}
!84 = !{!"_ZTS24StructureAnchorHashTable", !19, i64 0, !6, i64 2, !6, i64 3, !5, i64 4, !6, i64 8}
!85 = !{!86, !6, i64 0}
!86 = !{!"_ZTSN24StructureAnchorHashTable14HashTableEntryE", !6, i64 0, !6, i64 1}
!87 = !{!86, !6, i64 1}
!88 = distinct !{!88, !15}
!89 = !{!"branch_weights", i32 1, i32 16000, i32 4, i32 2, i32 1}
"
            }
        }
        
