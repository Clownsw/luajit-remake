Deduplicate return continuations: many return continuations are identical. We should try to see if LLVM's MergeFunctions pass can fix it

Further reduce calling conv overhead: currently even with GHC cc, LLVM still always generate a 'sub rsp, xxx' at the start and 'add rsp, xxx' at the end, even if the fast path makes no function call. I can see two ideas to optimize this: 
(1) Try to have some sort of MachineBasicBlock pass to sink the 'sub rsp,xxx' instruction (seems hard, also could get into tricky problems with the red zone) 
(2) Set some limit (say 256), simply remove all the rsp arithmetic if 'xxx <= 256' (with some hacky asm pass probably), and have a pair of hand-written asm functions to enter/exit VM that sub/add rsp before the jmp, e.g., the entry function would look like
... set up the parameter registers for GHC cc ...
sub rsp, 256
jmp *entry
This should be completely safe since every function is always tail-calling (i.e., jumping to) the next function.

We probably shouldn't call memcpy/memmove, since it's in a .so thus an indirect call..

